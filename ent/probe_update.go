// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/dreamvo/gilfoyle/ent/media"
	"github.com/dreamvo/gilfoyle/ent/predicate"
	"github.com/dreamvo/gilfoyle/ent/probe"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// ProbeUpdate is the builder for updating Probe entities.
type ProbeUpdate struct {
	config
	hooks    []Hook
	mutation *ProbeMutation
}

// Where adds a new predicate for the builder.
func (pu *ProbeUpdate) Where(ps ...predicate.Probe) *ProbeUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetFilename sets the filename field.
func (pu *ProbeUpdate) SetFilename(s string) *ProbeUpdate {
	pu.mutation.SetFilename(s)
	return pu
}

// SetFilesize sets the filesize field.
func (pu *ProbeUpdate) SetFilesize(i int) *ProbeUpdate {
	pu.mutation.ResetFilesize()
	pu.mutation.SetFilesize(i)
	return pu
}

// SetNillableFilesize sets the filesize field if the given value is not nil.
func (pu *ProbeUpdate) SetNillableFilesize(i *int) *ProbeUpdate {
	if i != nil {
		pu.SetFilesize(*i)
	}
	return pu
}

// AddFilesize adds i to filesize.
func (pu *ProbeUpdate) AddFilesize(i int) *ProbeUpdate {
	pu.mutation.AddFilesize(i)
	return pu
}

// SetChecksumSha256 sets the checksum_sha256 field.
func (pu *ProbeUpdate) SetChecksumSha256(s string) *ProbeUpdate {
	pu.mutation.SetChecksumSha256(s)
	return pu
}

// SetAspectRatio sets the aspect_ratio field.
func (pu *ProbeUpdate) SetAspectRatio(s string) *ProbeUpdate {
	pu.mutation.SetAspectRatio(s)
	return pu
}

// SetNillableAspectRatio sets the aspect_ratio field if the given value is not nil.
func (pu *ProbeUpdate) SetNillableAspectRatio(s *string) *ProbeUpdate {
	if s != nil {
		pu.SetAspectRatio(*s)
	}
	return pu
}

// SetWidth sets the width field.
func (pu *ProbeUpdate) SetWidth(i int) *ProbeUpdate {
	pu.mutation.ResetWidth()
	pu.mutation.SetWidth(i)
	return pu
}

// AddWidth adds i to width.
func (pu *ProbeUpdate) AddWidth(i int) *ProbeUpdate {
	pu.mutation.AddWidth(i)
	return pu
}

// SetHeight sets the height field.
func (pu *ProbeUpdate) SetHeight(i int) *ProbeUpdate {
	pu.mutation.ResetHeight()
	pu.mutation.SetHeight(i)
	return pu
}

// AddHeight adds i to height.
func (pu *ProbeUpdate) AddHeight(i int) *ProbeUpdate {
	pu.mutation.AddHeight(i)
	return pu
}

// SetDurationSeconds sets the duration_seconds field.
func (pu *ProbeUpdate) SetDurationSeconds(f float64) *ProbeUpdate {
	pu.mutation.ResetDurationSeconds()
	pu.mutation.SetDurationSeconds(f)
	return pu
}

// SetNillableDurationSeconds sets the duration_seconds field if the given value is not nil.
func (pu *ProbeUpdate) SetNillableDurationSeconds(f *float64) *ProbeUpdate {
	if f != nil {
		pu.SetDurationSeconds(*f)
	}
	return pu
}

// AddDurationSeconds adds f to duration_seconds.
func (pu *ProbeUpdate) AddDurationSeconds(f float64) *ProbeUpdate {
	pu.mutation.AddDurationSeconds(f)
	return pu
}

// SetVideoBitrate sets the video_bitrate field.
func (pu *ProbeUpdate) SetVideoBitrate(i int) *ProbeUpdate {
	pu.mutation.ResetVideoBitrate()
	pu.mutation.SetVideoBitrate(i)
	return pu
}

// SetNillableVideoBitrate sets the video_bitrate field if the given value is not nil.
func (pu *ProbeUpdate) SetNillableVideoBitrate(i *int) *ProbeUpdate {
	if i != nil {
		pu.SetVideoBitrate(*i)
	}
	return pu
}

// AddVideoBitrate adds i to video_bitrate.
func (pu *ProbeUpdate) AddVideoBitrate(i int) *ProbeUpdate {
	pu.mutation.AddVideoBitrate(i)
	return pu
}

// SetAudioBitrate sets the audio_bitrate field.
func (pu *ProbeUpdate) SetAudioBitrate(i int) *ProbeUpdate {
	pu.mutation.ResetAudioBitrate()
	pu.mutation.SetAudioBitrate(i)
	return pu
}

// SetNillableAudioBitrate sets the audio_bitrate field if the given value is not nil.
func (pu *ProbeUpdate) SetNillableAudioBitrate(i *int) *ProbeUpdate {
	if i != nil {
		pu.SetAudioBitrate(*i)
	}
	return pu
}

// AddAudioBitrate adds i to audio_bitrate.
func (pu *ProbeUpdate) AddAudioBitrate(i int) *ProbeUpdate {
	pu.mutation.AddAudioBitrate(i)
	return pu
}

// SetFramerate sets the framerate field.
func (pu *ProbeUpdate) SetFramerate(f float64) *ProbeUpdate {
	pu.mutation.ResetFramerate()
	pu.mutation.SetFramerate(f)
	return pu
}

// AddFramerate adds f to framerate.
func (pu *ProbeUpdate) AddFramerate(f float64) *ProbeUpdate {
	pu.mutation.AddFramerate(f)
	return pu
}

// SetFormat sets the format field.
func (pu *ProbeUpdate) SetFormat(s string) *ProbeUpdate {
	pu.mutation.SetFormat(s)
	return pu
}

// SetNbStreams sets the nb_streams field.
func (pu *ProbeUpdate) SetNbStreams(i int) *ProbeUpdate {
	pu.mutation.ResetNbStreams()
	pu.mutation.SetNbStreams(i)
	return pu
}

// SetNillableNbStreams sets the nb_streams field if the given value is not nil.
func (pu *ProbeUpdate) SetNillableNbStreams(i *int) *ProbeUpdate {
	if i != nil {
		pu.SetNbStreams(*i)
	}
	return pu
}

// AddNbStreams adds i to nb_streams.
func (pu *ProbeUpdate) AddNbStreams(i int) *ProbeUpdate {
	pu.mutation.AddNbStreams(i)
	return pu
}

// SetCreatedAt sets the created_at field.
func (pu *ProbeUpdate) SetCreatedAt(t time.Time) *ProbeUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (pu *ProbeUpdate) SetNillableCreatedAt(t *time.Time) *ProbeUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the updated_at field.
func (pu *ProbeUpdate) SetUpdatedAt(t time.Time) *ProbeUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetMediaID sets the media edge to Media by id.
func (pu *ProbeUpdate) SetMediaID(id uuid.UUID) *ProbeUpdate {
	pu.mutation.SetMediaID(id)
	return pu
}

// SetMedia sets the media edge to Media.
func (pu *ProbeUpdate) SetMedia(m *Media) *ProbeUpdate {
	return pu.SetMediaID(m.ID)
}

// Mutation returns the ProbeMutation object of the builder.
func (pu *ProbeUpdate) Mutation() *ProbeMutation {
	return pu.mutation
}

// ClearMedia clears the "media" edge to type Media.
func (pu *ProbeUpdate) ClearMedia() *ProbeUpdate {
	pu.mutation.ClearMedia()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProbeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProbeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProbeUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProbeUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProbeUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProbeUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := probe.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProbeUpdate) check() error {
	if v, ok := pu.mutation.Filename(); ok {
		if err := probe.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf("ent: validator failed for field \"filename\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Filesize(); ok {
		if err := probe.FilesizeValidator(v); err != nil {
			return &ValidationError{Name: "filesize", err: fmt.Errorf("ent: validator failed for field \"filesize\": %w", err)}
		}
	}
	if v, ok := pu.mutation.ChecksumSha256(); ok {
		if err := probe.ChecksumSha256Validator(v); err != nil {
			return &ValidationError{Name: "checksum_sha256", err: fmt.Errorf("ent: validator failed for field \"checksum_sha256\": %w", err)}
		}
	}
	if v, ok := pu.mutation.AspectRatio(); ok {
		if err := probe.AspectRatioValidator(v); err != nil {
			return &ValidationError{Name: "aspect_ratio", err: fmt.Errorf("ent: validator failed for field \"aspect_ratio\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Width(); ok {
		if err := probe.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf("ent: validator failed for field \"width\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Height(); ok {
		if err := probe.HeightValidator(v); err != nil {
			return &ValidationError{Name: "height", err: fmt.Errorf("ent: validator failed for field \"height\": %w", err)}
		}
	}
	if v, ok := pu.mutation.DurationSeconds(); ok {
		if err := probe.DurationSecondsValidator(v); err != nil {
			return &ValidationError{Name: "duration_seconds", err: fmt.Errorf("ent: validator failed for field \"duration_seconds\": %w", err)}
		}
	}
	if v, ok := pu.mutation.VideoBitrate(); ok {
		if err := probe.VideoBitrateValidator(v); err != nil {
			return &ValidationError{Name: "video_bitrate", err: fmt.Errorf("ent: validator failed for field \"video_bitrate\": %w", err)}
		}
	}
	if v, ok := pu.mutation.AudioBitrate(); ok {
		if err := probe.AudioBitrateValidator(v); err != nil {
			return &ValidationError{Name: "audio_bitrate", err: fmt.Errorf("ent: validator failed for field \"audio_bitrate\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Framerate(); ok {
		if err := probe.FramerateValidator(v); err != nil {
			return &ValidationError{Name: "framerate", err: fmt.Errorf("ent: validator failed for field \"framerate\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Format(); ok {
		if err := probe.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf("ent: validator failed for field \"format\": %w", err)}
		}
	}
	if v, ok := pu.mutation.NbStreams(); ok {
		if err := probe.NbStreamsValidator(v); err != nil {
			return &ValidationError{Name: "nb_streams", err: fmt.Errorf("ent: validator failed for field \"nb_streams\": %w", err)}
		}
	}
	if _, ok := pu.mutation.MediaID(); pu.mutation.MediaCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"media\"")
	}
	return nil
}

func (pu *ProbeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   probe.Table,
			Columns: probe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: probe.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Filename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: probe.FieldFilename,
		})
	}
	if value, ok := pu.mutation.Filesize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldFilesize,
		})
	}
	if value, ok := pu.mutation.AddedFilesize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldFilesize,
		})
	}
	if value, ok := pu.mutation.ChecksumSha256(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: probe.FieldChecksumSha256,
		})
	}
	if value, ok := pu.mutation.AspectRatio(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: probe.FieldAspectRatio,
		})
	}
	if value, ok := pu.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldWidth,
		})
	}
	if value, ok := pu.mutation.AddedWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldWidth,
		})
	}
	if value, ok := pu.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldHeight,
		})
	}
	if value, ok := pu.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldHeight,
		})
	}
	if value, ok := pu.mutation.DurationSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: probe.FieldDurationSeconds,
		})
	}
	if value, ok := pu.mutation.AddedDurationSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: probe.FieldDurationSeconds,
		})
	}
	if value, ok := pu.mutation.VideoBitrate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldVideoBitrate,
		})
	}
	if value, ok := pu.mutation.AddedVideoBitrate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldVideoBitrate,
		})
	}
	if value, ok := pu.mutation.AudioBitrate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldAudioBitrate,
		})
	}
	if value, ok := pu.mutation.AddedAudioBitrate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldAudioBitrate,
		})
	}
	if value, ok := pu.mutation.Framerate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: probe.FieldFramerate,
		})
	}
	if value, ok := pu.mutation.AddedFramerate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: probe.FieldFramerate,
		})
	}
	if value, ok := pu.mutation.Format(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: probe.FieldFormat,
		})
	}
	if value, ok := pu.mutation.NbStreams(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldNbStreams,
		})
	}
	if value, ok := pu.mutation.AddedNbStreams(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldNbStreams,
		})
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: probe.FieldCreatedAt,
		})
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: probe.FieldUpdatedAt,
		})
	}
	if pu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   probe.MediaTable,
			Columns: []string{probe.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: media.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   probe.MediaTable,
			Columns: []string{probe.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: media.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{probe.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProbeUpdateOne is the builder for updating a single Probe entity.
type ProbeUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProbeMutation
}

// SetFilename sets the filename field.
func (puo *ProbeUpdateOne) SetFilename(s string) *ProbeUpdateOne {
	puo.mutation.SetFilename(s)
	return puo
}

// SetFilesize sets the filesize field.
func (puo *ProbeUpdateOne) SetFilesize(i int) *ProbeUpdateOne {
	puo.mutation.ResetFilesize()
	puo.mutation.SetFilesize(i)
	return puo
}

// SetNillableFilesize sets the filesize field if the given value is not nil.
func (puo *ProbeUpdateOne) SetNillableFilesize(i *int) *ProbeUpdateOne {
	if i != nil {
		puo.SetFilesize(*i)
	}
	return puo
}

// AddFilesize adds i to filesize.
func (puo *ProbeUpdateOne) AddFilesize(i int) *ProbeUpdateOne {
	puo.mutation.AddFilesize(i)
	return puo
}

// SetChecksumSha256 sets the checksum_sha256 field.
func (puo *ProbeUpdateOne) SetChecksumSha256(s string) *ProbeUpdateOne {
	puo.mutation.SetChecksumSha256(s)
	return puo
}

// SetAspectRatio sets the aspect_ratio field.
func (puo *ProbeUpdateOne) SetAspectRatio(s string) *ProbeUpdateOne {
	puo.mutation.SetAspectRatio(s)
	return puo
}

// SetNillableAspectRatio sets the aspect_ratio field if the given value is not nil.
func (puo *ProbeUpdateOne) SetNillableAspectRatio(s *string) *ProbeUpdateOne {
	if s != nil {
		puo.SetAspectRatio(*s)
	}
	return puo
}

// SetWidth sets the width field.
func (puo *ProbeUpdateOne) SetWidth(i int) *ProbeUpdateOne {
	puo.mutation.ResetWidth()
	puo.mutation.SetWidth(i)
	return puo
}

// AddWidth adds i to width.
func (puo *ProbeUpdateOne) AddWidth(i int) *ProbeUpdateOne {
	puo.mutation.AddWidth(i)
	return puo
}

// SetHeight sets the height field.
func (puo *ProbeUpdateOne) SetHeight(i int) *ProbeUpdateOne {
	puo.mutation.ResetHeight()
	puo.mutation.SetHeight(i)
	return puo
}

// AddHeight adds i to height.
func (puo *ProbeUpdateOne) AddHeight(i int) *ProbeUpdateOne {
	puo.mutation.AddHeight(i)
	return puo
}

// SetDurationSeconds sets the duration_seconds field.
func (puo *ProbeUpdateOne) SetDurationSeconds(f float64) *ProbeUpdateOne {
	puo.mutation.ResetDurationSeconds()
	puo.mutation.SetDurationSeconds(f)
	return puo
}

// SetNillableDurationSeconds sets the duration_seconds field if the given value is not nil.
func (puo *ProbeUpdateOne) SetNillableDurationSeconds(f *float64) *ProbeUpdateOne {
	if f != nil {
		puo.SetDurationSeconds(*f)
	}
	return puo
}

// AddDurationSeconds adds f to duration_seconds.
func (puo *ProbeUpdateOne) AddDurationSeconds(f float64) *ProbeUpdateOne {
	puo.mutation.AddDurationSeconds(f)
	return puo
}

// SetVideoBitrate sets the video_bitrate field.
func (puo *ProbeUpdateOne) SetVideoBitrate(i int) *ProbeUpdateOne {
	puo.mutation.ResetVideoBitrate()
	puo.mutation.SetVideoBitrate(i)
	return puo
}

// SetNillableVideoBitrate sets the video_bitrate field if the given value is not nil.
func (puo *ProbeUpdateOne) SetNillableVideoBitrate(i *int) *ProbeUpdateOne {
	if i != nil {
		puo.SetVideoBitrate(*i)
	}
	return puo
}

// AddVideoBitrate adds i to video_bitrate.
func (puo *ProbeUpdateOne) AddVideoBitrate(i int) *ProbeUpdateOne {
	puo.mutation.AddVideoBitrate(i)
	return puo
}

// SetAudioBitrate sets the audio_bitrate field.
func (puo *ProbeUpdateOne) SetAudioBitrate(i int) *ProbeUpdateOne {
	puo.mutation.ResetAudioBitrate()
	puo.mutation.SetAudioBitrate(i)
	return puo
}

// SetNillableAudioBitrate sets the audio_bitrate field if the given value is not nil.
func (puo *ProbeUpdateOne) SetNillableAudioBitrate(i *int) *ProbeUpdateOne {
	if i != nil {
		puo.SetAudioBitrate(*i)
	}
	return puo
}

// AddAudioBitrate adds i to audio_bitrate.
func (puo *ProbeUpdateOne) AddAudioBitrate(i int) *ProbeUpdateOne {
	puo.mutation.AddAudioBitrate(i)
	return puo
}

// SetFramerate sets the framerate field.
func (puo *ProbeUpdateOne) SetFramerate(f float64) *ProbeUpdateOne {
	puo.mutation.ResetFramerate()
	puo.mutation.SetFramerate(f)
	return puo
}

// AddFramerate adds f to framerate.
func (puo *ProbeUpdateOne) AddFramerate(f float64) *ProbeUpdateOne {
	puo.mutation.AddFramerate(f)
	return puo
}

// SetFormat sets the format field.
func (puo *ProbeUpdateOne) SetFormat(s string) *ProbeUpdateOne {
	puo.mutation.SetFormat(s)
	return puo
}

// SetNbStreams sets the nb_streams field.
func (puo *ProbeUpdateOne) SetNbStreams(i int) *ProbeUpdateOne {
	puo.mutation.ResetNbStreams()
	puo.mutation.SetNbStreams(i)
	return puo
}

// SetNillableNbStreams sets the nb_streams field if the given value is not nil.
func (puo *ProbeUpdateOne) SetNillableNbStreams(i *int) *ProbeUpdateOne {
	if i != nil {
		puo.SetNbStreams(*i)
	}
	return puo
}

// AddNbStreams adds i to nb_streams.
func (puo *ProbeUpdateOne) AddNbStreams(i int) *ProbeUpdateOne {
	puo.mutation.AddNbStreams(i)
	return puo
}

// SetCreatedAt sets the created_at field.
func (puo *ProbeUpdateOne) SetCreatedAt(t time.Time) *ProbeUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (puo *ProbeUpdateOne) SetNillableCreatedAt(t *time.Time) *ProbeUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the updated_at field.
func (puo *ProbeUpdateOne) SetUpdatedAt(t time.Time) *ProbeUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetMediaID sets the media edge to Media by id.
func (puo *ProbeUpdateOne) SetMediaID(id uuid.UUID) *ProbeUpdateOne {
	puo.mutation.SetMediaID(id)
	return puo
}

// SetMedia sets the media edge to Media.
func (puo *ProbeUpdateOne) SetMedia(m *Media) *ProbeUpdateOne {
	return puo.SetMediaID(m.ID)
}

// Mutation returns the ProbeMutation object of the builder.
func (puo *ProbeUpdateOne) Mutation() *ProbeMutation {
	return puo.mutation
}

// ClearMedia clears the "media" edge to type Media.
func (puo *ProbeUpdateOne) ClearMedia() *ProbeUpdateOne {
	puo.mutation.ClearMedia()
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *ProbeUpdateOne) Save(ctx context.Context) (*Probe, error) {
	var (
		err  error
		node *Probe
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProbeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProbeUpdateOne) SaveX(ctx context.Context) *Probe {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProbeUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProbeUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProbeUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := probe.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProbeUpdateOne) check() error {
	if v, ok := puo.mutation.Filename(); ok {
		if err := probe.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf("ent: validator failed for field \"filename\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Filesize(); ok {
		if err := probe.FilesizeValidator(v); err != nil {
			return &ValidationError{Name: "filesize", err: fmt.Errorf("ent: validator failed for field \"filesize\": %w", err)}
		}
	}
	if v, ok := puo.mutation.ChecksumSha256(); ok {
		if err := probe.ChecksumSha256Validator(v); err != nil {
			return &ValidationError{Name: "checksum_sha256", err: fmt.Errorf("ent: validator failed for field \"checksum_sha256\": %w", err)}
		}
	}
	if v, ok := puo.mutation.AspectRatio(); ok {
		if err := probe.AspectRatioValidator(v); err != nil {
			return &ValidationError{Name: "aspect_ratio", err: fmt.Errorf("ent: validator failed for field \"aspect_ratio\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Width(); ok {
		if err := probe.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf("ent: validator failed for field \"width\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Height(); ok {
		if err := probe.HeightValidator(v); err != nil {
			return &ValidationError{Name: "height", err: fmt.Errorf("ent: validator failed for field \"height\": %w", err)}
		}
	}
	if v, ok := puo.mutation.DurationSeconds(); ok {
		if err := probe.DurationSecondsValidator(v); err != nil {
			return &ValidationError{Name: "duration_seconds", err: fmt.Errorf("ent: validator failed for field \"duration_seconds\": %w", err)}
		}
	}
	if v, ok := puo.mutation.VideoBitrate(); ok {
		if err := probe.VideoBitrateValidator(v); err != nil {
			return &ValidationError{Name: "video_bitrate", err: fmt.Errorf("ent: validator failed for field \"video_bitrate\": %w", err)}
		}
	}
	if v, ok := puo.mutation.AudioBitrate(); ok {
		if err := probe.AudioBitrateValidator(v); err != nil {
			return &ValidationError{Name: "audio_bitrate", err: fmt.Errorf("ent: validator failed for field \"audio_bitrate\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Framerate(); ok {
		if err := probe.FramerateValidator(v); err != nil {
			return &ValidationError{Name: "framerate", err: fmt.Errorf("ent: validator failed for field \"framerate\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Format(); ok {
		if err := probe.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf("ent: validator failed for field \"format\": %w", err)}
		}
	}
	if v, ok := puo.mutation.NbStreams(); ok {
		if err := probe.NbStreamsValidator(v); err != nil {
			return &ValidationError{Name: "nb_streams", err: fmt.Errorf("ent: validator failed for field \"nb_streams\": %w", err)}
		}
	}
	if _, ok := puo.mutation.MediaID(); puo.mutation.MediaCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"media\"")
	}
	return nil
}

func (puo *ProbeUpdateOne) sqlSave(ctx context.Context) (_node *Probe, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   probe.Table,
			Columns: probe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: probe.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Probe.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.Filename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: probe.FieldFilename,
		})
	}
	if value, ok := puo.mutation.Filesize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldFilesize,
		})
	}
	if value, ok := puo.mutation.AddedFilesize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldFilesize,
		})
	}
	if value, ok := puo.mutation.ChecksumSha256(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: probe.FieldChecksumSha256,
		})
	}
	if value, ok := puo.mutation.AspectRatio(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: probe.FieldAspectRatio,
		})
	}
	if value, ok := puo.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldWidth,
		})
	}
	if value, ok := puo.mutation.AddedWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldWidth,
		})
	}
	if value, ok := puo.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldHeight,
		})
	}
	if value, ok := puo.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldHeight,
		})
	}
	if value, ok := puo.mutation.DurationSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: probe.FieldDurationSeconds,
		})
	}
	if value, ok := puo.mutation.AddedDurationSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: probe.FieldDurationSeconds,
		})
	}
	if value, ok := puo.mutation.VideoBitrate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldVideoBitrate,
		})
	}
	if value, ok := puo.mutation.AddedVideoBitrate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldVideoBitrate,
		})
	}
	if value, ok := puo.mutation.AudioBitrate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldAudioBitrate,
		})
	}
	if value, ok := puo.mutation.AddedAudioBitrate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldAudioBitrate,
		})
	}
	if value, ok := puo.mutation.Framerate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: probe.FieldFramerate,
		})
	}
	if value, ok := puo.mutation.AddedFramerate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: probe.FieldFramerate,
		})
	}
	if value, ok := puo.mutation.Format(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: probe.FieldFormat,
		})
	}
	if value, ok := puo.mutation.NbStreams(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldNbStreams,
		})
	}
	if value, ok := puo.mutation.AddedNbStreams(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldNbStreams,
		})
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: probe.FieldCreatedAt,
		})
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: probe.FieldUpdatedAt,
		})
	}
	if puo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   probe.MediaTable,
			Columns: []string{probe.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: media.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   probe.MediaTable,
			Columns: []string{probe.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: media.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Probe{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{probe.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
