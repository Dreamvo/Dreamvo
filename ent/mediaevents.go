// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/dreamvo/gilfoyle/ent/media"
	"github.com/dreamvo/gilfoyle/ent/mediaevents"
	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// MediaEvents is the model entity for the MediaEvents schema.
type MediaEvents struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Level holds the value of the "level" field.
	Level mediaevents.Level `json:"level,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MediaEventsQuery when eager-loading is set.
	Edges MediaEventsEdges `json:"edges"`
	media *uuid.UUID
}

// MediaEventsEdges holds the relations/edges for other nodes in the graph.
type MediaEventsEdges struct {
	// Media holds the value of the media edge.
	Media *Media `json"media,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MediaEventsEdges) MediaOrErr() (*Media, error) {
	if e.loadedTypes[0] {
		if e.Media == nil {
			// The edge media was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: media.Label}
		}
		return e.Media, nil
	}
	return nil, &NotLoadedError{edge: "media"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MediaEvents) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},      // id
		&sql.NullString{}, // level
		&sql.NullString{}, // reason
		&sql.NullString{}, // message
		&sql.NullTime{},   // created_at
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*MediaEvents) fkValues() []interface{} {
	return []interface{}{
		&uuid.UUID{}, // media
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MediaEvents fields.
func (me *MediaEvents) assignValues(values ...interface{}) error {
	if m, n := len(values), len(mediaevents.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		me.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field level", values[0])
	} else if value.Valid {
		me.Level = mediaevents.Level(value.String)
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field reason", values[1])
	} else if value.Valid {
		me.Reason = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field message", values[2])
	} else if value.Valid {
		me.Message = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[3])
	} else if value.Valid {
		me.CreatedAt = value.Time
	}
	values = values[4:]
	if len(values) == len(mediaevents.ForeignKeys) {
		if value, ok := values[0].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field media", values[0])
		} else if value != nil {
			me.media = value
		}
	}
	return nil
}

// QueryMedia queries the media edge of the MediaEvents.
func (me *MediaEvents) QueryMedia() *MediaQuery {
	return (&MediaEventsClient{config: me.config}).QueryMedia(me)
}

// Update returns a builder for updating this MediaEvents.
// Note that, you need to call MediaEvents.Unwrap() before calling this method, if this MediaEvents
// was returned from a transaction, and the transaction was committed or rolled back.
func (me *MediaEvents) Update() *MediaEventsUpdateOne {
	return (&MediaEventsClient{config: me.config}).UpdateOne(me)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (me *MediaEvents) Unwrap() *MediaEvents {
	tx, ok := me.config.driver.(*txDriver)
	if !ok {
		panic("ent: MediaEvents is not a transactional entity")
	}
	me.config.driver = tx.drv
	return me
}

// String implements the fmt.Stringer.
func (me *MediaEvents) String() string {
	var builder strings.Builder
	builder.WriteString("MediaEvents(")
	builder.WriteString(fmt.Sprintf("id=%v", me.ID))
	builder.WriteString(", level=")
	builder.WriteString(fmt.Sprintf("%v", me.Level))
	builder.WriteString(", reason=")
	builder.WriteString(me.Reason)
	builder.WriteString(", message=")
	builder.WriteString(me.Message)
	builder.WriteString(", created_at=")
	builder.WriteString(me.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MediaEventsSlice is a parsable slice of MediaEvents.
type MediaEventsSlice []*MediaEvents

func (me MediaEventsSlice) config(cfg config) {
	for _i := range me {
		me[_i].config = cfg
	}
}
