// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/dreamvo/gilfoyle/ent/media"
	"github.com/dreamvo/gilfoyle/ent/probe"
	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// Media is the model entity for the Media schema.
type Media struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// OriginalFilename holds the value of the "original_filename" field.
	OriginalFilename string `json:"original_filename,omitempty"`
	// Status holds the value of the "status" field.
	Status media.Status `json:"status,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Playable holds the value of the "playable" field.
	Playable bool `json:"playable,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MediaQuery when eager-loading is set.
	Edges MediaEdges `json:"edges"`
}

// MediaEdges holds the relations/edges for other nodes in the graph.
type MediaEdges struct {
	// MediaFiles holds the value of the media_files edge.
	MediaFiles []*MediaFile `json:"media_files,omitempty"`
	// Probe holds the value of the probe edge.
	Probe *Probe `json:"probe,omitempty"`
	// Events holds the value of the events edge.
	Events []*MediaEvents `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// MediaFilesOrErr returns the MediaFiles value or an error if the edge
// was not loaded in eager-loading.
func (e MediaEdges) MediaFilesOrErr() ([]*MediaFile, error) {
	if e.loadedTypes[0] {
		return e.MediaFiles, nil
	}
	return nil, &NotLoadedError{edge: "media_files"}
}

// ProbeOrErr returns the Probe value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MediaEdges) ProbeOrErr() (*Probe, error) {
	if e.loadedTypes[1] {
		if e.Probe == nil {
			// The edge probe was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: probe.Label}
		}
		return e.Probe, nil
	}
	return nil, &NotLoadedError{edge: "probe"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e MediaEdges) EventsOrErr() ([]*MediaEvents, error) {
	if e.loadedTypes[2] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Media) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},      // id
		&sql.NullString{}, // title
		&sql.NullString{}, // original_filename
		&sql.NullString{}, // status
		&sql.NullString{}, // message
		&sql.NullBool{},   // playable
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Media fields.
func (m *Media) assignValues(values ...interface{}) error {
	if m, n := len(values), len(media.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		m.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field title", values[0])
	} else if value.Valid {
		m.Title = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field original_filename", values[1])
	} else if value.Valid {
		m.OriginalFilename = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[2])
	} else if value.Valid {
		m.Status = media.Status(value.String)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field message", values[3])
	} else if value.Valid {
		m.Message = value.String
	}
	if value, ok := values[4].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field playable", values[4])
	} else if value.Valid {
		m.Playable = value.Bool
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[5])
	} else if value.Valid {
		m.CreatedAt = value.Time
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[6])
	} else if value.Valid {
		m.UpdatedAt = value.Time
	}
	return nil
}

// QueryMediaFiles queries the media_files edge of the Media.
func (m *Media) QueryMediaFiles() *MediaFileQuery {
	return (&MediaClient{config: m.config}).QueryMediaFiles(m)
}

// QueryProbe queries the probe edge of the Media.
func (m *Media) QueryProbe() *ProbeQuery {
	return (&MediaClient{config: m.config}).QueryProbe(m)
}

// QueryEvents queries the events edge of the Media.
func (m *Media) QueryEvents() *MediaEventsQuery {
	return (&MediaClient{config: m.config}).QueryEvents(m)
}

// Update returns a builder for updating this Media.
// Note that, you need to call Media.Unwrap() before calling this method, if this Media
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Media) Update() *MediaUpdateOne {
	return (&MediaClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Media) Unwrap() *Media {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Media is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Media) String() string {
	var builder strings.Builder
	builder.WriteString("Media(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", title=")
	builder.WriteString(m.Title)
	builder.WriteString(", original_filename=")
	builder.WriteString(m.OriginalFilename)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", m.Status))
	builder.WriteString(", message=")
	builder.WriteString(m.Message)
	builder.WriteString(", playable=")
	builder.WriteString(fmt.Sprintf("%v", m.Playable))
	builder.WriteString(", created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MediaSlice is a parsable slice of Media.
type MediaSlice []*Media

func (m MediaSlice) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
