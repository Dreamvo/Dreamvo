// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/dreamvo/gilfoyle/ent/media"
	"github.com/dreamvo/gilfoyle/ent/mediafile"
	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// MediaFile is the model entity for the MediaFile schema.
type MediaFile struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// RenditionName holds the value of the "rendition_name" field.
	RenditionName string `json:"rendition_name,omitempty"`
	// Format holds the value of the "format" field.
	Format string `json:"format,omitempty"`
	// TargetBandwidth holds the value of the "target_bandwidth" field.
	TargetBandwidth uint64 `json:"target_bandwidth,omitempty"`
	// VideoBitrate holds the value of the "video_bitrate" field.
	VideoBitrate int64 `json:"video_bitrate,omitempty"`
	// ResolutionWidth holds the value of the "resolution_width" field.
	ResolutionWidth uint16 `json:"resolution_width,omitempty"`
	// ResolutionHeight holds the value of the "resolution_height" field.
	ResolutionHeight uint16 `json:"resolution_height,omitempty"`
	// Framerate holds the value of the "framerate" field.
	Framerate uint8 `json:"framerate,omitempty"`
	// DurationSeconds holds the value of the "duration_seconds" field.
	DurationSeconds float64 `json:"duration_seconds,omitempty"`
	// MediaType holds the value of the "media_type" field.
	MediaType mediafile.MediaType `json:"media_type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MediaFileQuery when eager-loading is set.
	Edges MediaFileEdges `json:"edges"`
	media *uuid.UUID
}

// MediaFileEdges holds the relations/edges for other nodes in the graph.
type MediaFileEdges struct {
	// Media holds the value of the media edge.
	Media *Media `json"media,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MediaFileEdges) MediaOrErr() (*Media, error) {
	if e.loadedTypes[0] {
		if e.Media == nil {
			// The edge media was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: media.Label}
		}
		return e.Media, nil
	}
	return nil, &NotLoadedError{edge: "media"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MediaFile) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case mediafile.FieldDurationSeconds:
			values[i] = &sql.NullFloat64{}
		case mediafile.FieldTargetBandwidth, mediafile.FieldVideoBitrate, mediafile.FieldResolutionWidth, mediafile.FieldResolutionHeight, mediafile.FieldFramerate:
			values[i] = &sql.NullInt64{}
		case mediafile.FieldRenditionName, mediafile.FieldFormat, mediafile.FieldMediaType:
			values[i] = &sql.NullString{}
		case mediafile.FieldCreatedAt, mediafile.FieldUpdatedAt:
			values[i] = &sql.NullTime{}
		case mediafile.FieldID:
			values[i] = &uuid.UUID{}
		case mediafile.ForeignKeys[0]: // media
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type MediaFile", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MediaFile fields.
func (mf *MediaFile) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mediafile.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mf.ID = *value
			}
		case mediafile.FieldRenditionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rendition_name", values[i])
			} else if value.Valid {
				mf.RenditionName = value.String
			}
		case mediafile.FieldFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field format", values[i])
			} else if value.Valid {
				mf.Format = value.String
			}
		case mediafile.FieldTargetBandwidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_bandwidth", values[i])
			} else if value.Valid {
				mf.TargetBandwidth = uint64(value.Int64)
			}
		case mediafile.FieldVideoBitrate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field video_bitrate", values[i])
			} else if value.Valid {
				mf.VideoBitrate = value.Int64
			}
		case mediafile.FieldResolutionWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field resolution_width", values[i])
			} else if value.Valid {
				mf.ResolutionWidth = uint16(value.Int64)
			}
		case mediafile.FieldResolutionHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field resolution_height", values[i])
			} else if value.Valid {
				mf.ResolutionHeight = uint16(value.Int64)
			}
		case mediafile.FieldFramerate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field framerate", values[i])
			} else if value.Valid {
				mf.Framerate = uint8(value.Int64)
			}
		case mediafile.FieldDurationSeconds:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_seconds", values[i])
			} else if value.Valid {
				mf.DurationSeconds = value.Float64
			}
		case mediafile.FieldMediaType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_type", values[i])
			} else if value.Valid {
				mf.MediaType = mediafile.MediaType(value.String)
			}
		case mediafile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mf.CreatedAt = value.Time
			}
		case mediafile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mf.UpdatedAt = value.Time
			}
		case mediafile.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field media", values[i])
			} else if value != nil {
				mf.media = value
			}
		}
	}
	return nil
}

// QueryMedia queries the "media" edge of the MediaFile entity.
func (mf *MediaFile) QueryMedia() *MediaQuery {
	return (&MediaFileClient{config: mf.config}).QueryMedia(mf)
}

// Update returns a builder for updating this MediaFile.
// Note that you need to call MediaFile.Unwrap() before calling this method if this MediaFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (mf *MediaFile) Update() *MediaFileUpdateOne {
	return (&MediaFileClient{config: mf.config}).UpdateOne(mf)
}

// Unwrap unwraps the MediaFile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mf *MediaFile) Unwrap() *MediaFile {
	tx, ok := mf.config.driver.(*txDriver)
	if !ok {
		panic("ent: MediaFile is not a transactional entity")
	}
	mf.config.driver = tx.drv
	return mf
}

// String implements the fmt.Stringer.
func (mf *MediaFile) String() string {
	var builder strings.Builder
	builder.WriteString("MediaFile(")
	builder.WriteString(fmt.Sprintf("id=%v", mf.ID))
	builder.WriteString(", rendition_name=")
	builder.WriteString(mf.RenditionName)
	builder.WriteString(", format=")
	builder.WriteString(mf.Format)
	builder.WriteString(", target_bandwidth=")
	builder.WriteString(fmt.Sprintf("%v", mf.TargetBandwidth))
	builder.WriteString(", video_bitrate=")
	builder.WriteString(fmt.Sprintf("%v", mf.VideoBitrate))
	builder.WriteString(", resolution_width=")
	builder.WriteString(fmt.Sprintf("%v", mf.ResolutionWidth))
	builder.WriteString(", resolution_height=")
	builder.WriteString(fmt.Sprintf("%v", mf.ResolutionHeight))
	builder.WriteString(", framerate=")
	builder.WriteString(fmt.Sprintf("%v", mf.Framerate))
	builder.WriteString(", duration_seconds=")
	builder.WriteString(fmt.Sprintf("%v", mf.DurationSeconds))
	builder.WriteString(", media_type=")
	builder.WriteString(fmt.Sprintf("%v", mf.MediaType))
	builder.WriteString(", created_at=")
	builder.WriteString(mf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(mf.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MediaFiles is a parsable slice of MediaFile.
type MediaFiles []*MediaFile

func (mf MediaFiles) config(cfg config) {
	for _i := range mf {
		mf[_i].config = cfg
	}
}
