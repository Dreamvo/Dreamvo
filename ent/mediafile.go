// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/dreamvo/gilfoyle/ent/media"
	"github.com/dreamvo/gilfoyle/ent/mediafile"
	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// MediaFile is the model entity for the MediaFile schema.
type MediaFile struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// RenditionName holds the value of the "rendition_name" field.
	RenditionName string `json:"rendition_name,omitempty"`
	// Format holds the value of the "format" field.
	Format string `json:"format,omitempty"`
	// TargetBandwidth holds the value of the "target_bandwidth" field.
	TargetBandwidth uint64 `json:"target_bandwidth,omitempty"`
	// VideoBitrate holds the value of the "video_bitrate" field.
	VideoBitrate int64 `json:"video_bitrate,omitempty"`
	// AudioBitrate holds the value of the "audio_bitrate" field.
	AudioBitrate int64 `json:"audio_bitrate,omitempty"`
	// VideoCodec holds the value of the "video_codec" field.
	VideoCodec string `json:"video_codec,omitempty"`
	// AudioCodec holds the value of the "audio_codec" field.
	AudioCodec string `json:"audio_codec,omitempty"`
	// ResolutionWidth holds the value of the "resolution_width" field.
	ResolutionWidth uint16 `json:"resolution_width,omitempty"`
	// ResolutionHeight holds the value of the "resolution_height" field.
	ResolutionHeight uint16 `json:"resolution_height,omitempty"`
	// Framerate holds the value of the "framerate" field.
	Framerate uint8 `json:"framerate,omitempty"`
	// DurationSeconds holds the value of the "duration_seconds" field.
	DurationSeconds float64 `json:"duration_seconds,omitempty"`
	// MediaType holds the value of the "media_type" field.
	MediaType mediafile.MediaType `json:"media_type,omitempty"`
	// Status holds the value of the "status" field.
	Status mediafile.Status `json:"status,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// EntryFile holds the value of the "entry_file" field.
	EntryFile string `json:"entry_file,omitempty"`
	// Mimetype holds the value of the "mimetype" field.
	Mimetype string `json:"mimetype,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MediaFileQuery when eager-loading is set.
	Edges MediaFileEdges `json:"edges"`
	media *uuid.UUID
}

// MediaFileEdges holds the relations/edges for other nodes in the graph.
type MediaFileEdges struct {
	// Media holds the value of the media edge.
	Media *Media `json"media,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MediaFileEdges) MediaOrErr() (*Media, error) {
	if e.loadedTypes[0] {
		if e.Media == nil {
			// The edge media was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: media.Label}
		}
		return e.Media, nil
	}
	return nil, &NotLoadedError{edge: "media"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MediaFile) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},       // id
		&sql.NullString{},  // rendition_name
		&sql.NullString{},  // format
		&sql.NullInt64{},   // target_bandwidth
		&sql.NullInt64{},   // video_bitrate
		&sql.NullInt64{},   // audio_bitrate
		&sql.NullString{},  // video_codec
		&sql.NullString{},  // audio_codec
		&sql.NullInt64{},   // resolution_width
		&sql.NullInt64{},   // resolution_height
		&sql.NullInt64{},   // framerate
		&sql.NullFloat64{}, // duration_seconds
		&sql.NullString{},  // media_type
		&sql.NullString{},  // status
		&sql.NullString{},  // message
		&sql.NullString{},  // entry_file
		&sql.NullString{},  // mimetype
		&sql.NullTime{},    // created_at
		&sql.NullTime{},    // updated_at
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*MediaFile) fkValues() []interface{} {
	return []interface{}{
		&uuid.UUID{}, // media
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MediaFile fields.
func (mf *MediaFile) assignValues(values ...interface{}) error {
	if m, n := len(values), len(mediafile.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		mf.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field rendition_name", values[0])
	} else if value.Valid {
		mf.RenditionName = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field format", values[1])
	} else if value.Valid {
		mf.Format = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field target_bandwidth", values[2])
	} else if value.Valid {
		mf.TargetBandwidth = uint64(value.Int64)
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field video_bitrate", values[3])
	} else if value.Valid {
		mf.VideoBitrate = value.Int64
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field audio_bitrate", values[4])
	} else if value.Valid {
		mf.AudioBitrate = value.Int64
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field video_codec", values[5])
	} else if value.Valid {
		mf.VideoCodec = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field audio_codec", values[6])
	} else if value.Valid {
		mf.AudioCodec = value.String
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field resolution_width", values[7])
	} else if value.Valid {
		mf.ResolutionWidth = uint16(value.Int64)
	}
	if value, ok := values[8].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field resolution_height", values[8])
	} else if value.Valid {
		mf.ResolutionHeight = uint16(value.Int64)
	}
	if value, ok := values[9].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field framerate", values[9])
	} else if value.Valid {
		mf.Framerate = uint8(value.Int64)
	}
	if value, ok := values[10].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field duration_seconds", values[10])
	} else if value.Valid {
		mf.DurationSeconds = value.Float64
	}
	if value, ok := values[11].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field media_type", values[11])
	} else if value.Valid {
		mf.MediaType = mediafile.MediaType(value.String)
	}
	if value, ok := values[12].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[12])
	} else if value.Valid {
		mf.Status = mediafile.Status(value.String)
	}
	if value, ok := values[13].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field message", values[13])
	} else if value.Valid {
		mf.Message = value.String
	}
	if value, ok := values[14].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field entry_file", values[14])
	} else if value.Valid {
		mf.EntryFile = value.String
	}
	if value, ok := values[15].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field mimetype", values[15])
	} else if value.Valid {
		mf.Mimetype = value.String
	}
	if value, ok := values[16].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[16])
	} else if value.Valid {
		mf.CreatedAt = value.Time
	}
	if value, ok := values[17].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[17])
	} else if value.Valid {
		mf.UpdatedAt = value.Time
	}
	values = values[18:]
	if len(values) == len(mediafile.ForeignKeys) {
		if value, ok := values[0].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field media", values[0])
		} else if value != nil {
			mf.media = value
		}
	}
	return nil
}

// QueryMedia queries the media edge of the MediaFile.
func (mf *MediaFile) QueryMedia() *MediaQuery {
	return (&MediaFileClient{config: mf.config}).QueryMedia(mf)
}

// Update returns a builder for updating this MediaFile.
// Note that, you need to call MediaFile.Unwrap() before calling this method, if this MediaFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (mf *MediaFile) Update() *MediaFileUpdateOne {
	return (&MediaFileClient{config: mf.config}).UpdateOne(mf)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (mf *MediaFile) Unwrap() *MediaFile {
	tx, ok := mf.config.driver.(*txDriver)
	if !ok {
		panic("ent: MediaFile is not a transactional entity")
	}
	mf.config.driver = tx.drv
	return mf
}

// String implements the fmt.Stringer.
func (mf *MediaFile) String() string {
	var builder strings.Builder
	builder.WriteString("MediaFile(")
	builder.WriteString(fmt.Sprintf("id=%v", mf.ID))
	builder.WriteString(", rendition_name=")
	builder.WriteString(mf.RenditionName)
	builder.WriteString(", format=")
	builder.WriteString(mf.Format)
	builder.WriteString(", target_bandwidth=")
	builder.WriteString(fmt.Sprintf("%v", mf.TargetBandwidth))
	builder.WriteString(", video_bitrate=")
	builder.WriteString(fmt.Sprintf("%v", mf.VideoBitrate))
	builder.WriteString(", audio_bitrate=")
	builder.WriteString(fmt.Sprintf("%v", mf.AudioBitrate))
	builder.WriteString(", video_codec=")
	builder.WriteString(mf.VideoCodec)
	builder.WriteString(", audio_codec=")
	builder.WriteString(mf.AudioCodec)
	builder.WriteString(", resolution_width=")
	builder.WriteString(fmt.Sprintf("%v", mf.ResolutionWidth))
	builder.WriteString(", resolution_height=")
	builder.WriteString(fmt.Sprintf("%v", mf.ResolutionHeight))
	builder.WriteString(", framerate=")
	builder.WriteString(fmt.Sprintf("%v", mf.Framerate))
	builder.WriteString(", duration_seconds=")
	builder.WriteString(fmt.Sprintf("%v", mf.DurationSeconds))
	builder.WriteString(", media_type=")
	builder.WriteString(fmt.Sprintf("%v", mf.MediaType))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", mf.Status))
	builder.WriteString(", message=")
	builder.WriteString(mf.Message)
	builder.WriteString(", entry_file=")
	builder.WriteString(mf.EntryFile)
	builder.WriteString(", mimetype=")
	builder.WriteString(mf.Mimetype)
	builder.WriteString(", created_at=")
	builder.WriteString(mf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(mf.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MediaFiles is a parsable slice of MediaFile.
type MediaFiles []*MediaFile

func (mf MediaFiles) config(cfg config) {
	for _i := range mf {
		mf[_i].config = cfg
	}
}
