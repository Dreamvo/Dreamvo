// Code generated by entc, DO NOT EDIT.

package probe

import (
	"time"

	"github.com/dreamvo/gilfoyle/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their identifier.
func ID(id uuid.UUID) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Filename applies equality check predicate on the "filename" field. It's identical to FilenameEQ.
func Filename(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilename), v))
	})
}

// Filesize applies equality check predicate on the "filesize" field. It's identical to FilesizeEQ.
func Filesize(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilesize), v))
	})
}

// ChecksumSha256 applies equality check predicate on the "checksum_sha256" field. It's identical to ChecksumSha256EQ.
func ChecksumSha256(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChecksumSha256), v))
	})
}

// AspectRatio applies equality check predicate on the "aspect_ratio" field. It's identical to AspectRatioEQ.
func AspectRatio(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAspectRatio), v))
	})
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWidth), v))
	})
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeight), v))
	})
}

// DurationSeconds applies equality check predicate on the "duration_seconds" field. It's identical to DurationSecondsEQ.
func DurationSeconds(v float64) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDurationSeconds), v))
	})
}

// VideoBitrate applies equality check predicate on the "video_bitrate" field. It's identical to VideoBitrateEQ.
func VideoBitrate(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVideoBitrate), v))
	})
}

// AudioBitrate applies equality check predicate on the "audio_bitrate" field. It's identical to AudioBitrateEQ.
func AudioBitrate(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAudioBitrate), v))
	})
}

// Framerate applies equality check predicate on the "framerate" field. It's identical to FramerateEQ.
func Framerate(v float64) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFramerate), v))
	})
}

// Format applies equality check predicate on the "format" field. It's identical to FormatEQ.
func Format(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFormat), v))
	})
}

// NbStreams applies equality check predicate on the "nb_streams" field. It's identical to NbStreamsEQ.
func NbStreams(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNbStreams), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// FilenameEQ applies the EQ predicate on the "filename" field.
func FilenameEQ(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilename), v))
	})
}

// FilenameNEQ applies the NEQ predicate on the "filename" field.
func FilenameNEQ(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFilename), v))
	})
}

// FilenameIn applies the In predicate on the "filename" field.
func FilenameIn(vs ...string) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFilename), v...))
	})
}

// FilenameNotIn applies the NotIn predicate on the "filename" field.
func FilenameNotIn(vs ...string) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFilename), v...))
	})
}

// FilenameGT applies the GT predicate on the "filename" field.
func FilenameGT(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFilename), v))
	})
}

// FilenameGTE applies the GTE predicate on the "filename" field.
func FilenameGTE(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFilename), v))
	})
}

// FilenameLT applies the LT predicate on the "filename" field.
func FilenameLT(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFilename), v))
	})
}

// FilenameLTE applies the LTE predicate on the "filename" field.
func FilenameLTE(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFilename), v))
	})
}

// FilenameContains applies the Contains predicate on the "filename" field.
func FilenameContains(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFilename), v))
	})
}

// FilenameHasPrefix applies the HasPrefix predicate on the "filename" field.
func FilenameHasPrefix(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFilename), v))
	})
}

// FilenameHasSuffix applies the HasSuffix predicate on the "filename" field.
func FilenameHasSuffix(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFilename), v))
	})
}

// FilenameEqualFold applies the EqualFold predicate on the "filename" field.
func FilenameEqualFold(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFilename), v))
	})
}

// FilenameContainsFold applies the ContainsFold predicate on the "filename" field.
func FilenameContainsFold(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFilename), v))
	})
}

// FilesizeEQ applies the EQ predicate on the "filesize" field.
func FilesizeEQ(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilesize), v))
	})
}

// FilesizeNEQ applies the NEQ predicate on the "filesize" field.
func FilesizeNEQ(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFilesize), v))
	})
}

// FilesizeIn applies the In predicate on the "filesize" field.
func FilesizeIn(vs ...int) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFilesize), v...))
	})
}

// FilesizeNotIn applies the NotIn predicate on the "filesize" field.
func FilesizeNotIn(vs ...int) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFilesize), v...))
	})
}

// FilesizeGT applies the GT predicate on the "filesize" field.
func FilesizeGT(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFilesize), v))
	})
}

// FilesizeGTE applies the GTE predicate on the "filesize" field.
func FilesizeGTE(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFilesize), v))
	})
}

// FilesizeLT applies the LT predicate on the "filesize" field.
func FilesizeLT(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFilesize), v))
	})
}

// FilesizeLTE applies the LTE predicate on the "filesize" field.
func FilesizeLTE(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFilesize), v))
	})
}

// ChecksumSha256EQ applies the EQ predicate on the "checksum_sha256" field.
func ChecksumSha256EQ(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChecksumSha256), v))
	})
}

// ChecksumSha256NEQ applies the NEQ predicate on the "checksum_sha256" field.
func ChecksumSha256NEQ(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChecksumSha256), v))
	})
}

// ChecksumSha256In applies the In predicate on the "checksum_sha256" field.
func ChecksumSha256In(vs ...string) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChecksumSha256), v...))
	})
}

// ChecksumSha256NotIn applies the NotIn predicate on the "checksum_sha256" field.
func ChecksumSha256NotIn(vs ...string) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChecksumSha256), v...))
	})
}

// ChecksumSha256GT applies the GT predicate on the "checksum_sha256" field.
func ChecksumSha256GT(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChecksumSha256), v))
	})
}

// ChecksumSha256GTE applies the GTE predicate on the "checksum_sha256" field.
func ChecksumSha256GTE(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChecksumSha256), v))
	})
}

// ChecksumSha256LT applies the LT predicate on the "checksum_sha256" field.
func ChecksumSha256LT(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChecksumSha256), v))
	})
}

// ChecksumSha256LTE applies the LTE predicate on the "checksum_sha256" field.
func ChecksumSha256LTE(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChecksumSha256), v))
	})
}

// ChecksumSha256Contains applies the Contains predicate on the "checksum_sha256" field.
func ChecksumSha256Contains(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChecksumSha256), v))
	})
}

// ChecksumSha256HasPrefix applies the HasPrefix predicate on the "checksum_sha256" field.
func ChecksumSha256HasPrefix(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChecksumSha256), v))
	})
}

// ChecksumSha256HasSuffix applies the HasSuffix predicate on the "checksum_sha256" field.
func ChecksumSha256HasSuffix(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChecksumSha256), v))
	})
}

// ChecksumSha256EqualFold applies the EqualFold predicate on the "checksum_sha256" field.
func ChecksumSha256EqualFold(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChecksumSha256), v))
	})
}

// ChecksumSha256ContainsFold applies the ContainsFold predicate on the "checksum_sha256" field.
func ChecksumSha256ContainsFold(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChecksumSha256), v))
	})
}

// AspectRatioEQ applies the EQ predicate on the "aspect_ratio" field.
func AspectRatioEQ(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAspectRatio), v))
	})
}

// AspectRatioNEQ applies the NEQ predicate on the "aspect_ratio" field.
func AspectRatioNEQ(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAspectRatio), v))
	})
}

// AspectRatioIn applies the In predicate on the "aspect_ratio" field.
func AspectRatioIn(vs ...string) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAspectRatio), v...))
	})
}

// AspectRatioNotIn applies the NotIn predicate on the "aspect_ratio" field.
func AspectRatioNotIn(vs ...string) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAspectRatio), v...))
	})
}

// AspectRatioGT applies the GT predicate on the "aspect_ratio" field.
func AspectRatioGT(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAspectRatio), v))
	})
}

// AspectRatioGTE applies the GTE predicate on the "aspect_ratio" field.
func AspectRatioGTE(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAspectRatio), v))
	})
}

// AspectRatioLT applies the LT predicate on the "aspect_ratio" field.
func AspectRatioLT(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAspectRatio), v))
	})
}

// AspectRatioLTE applies the LTE predicate on the "aspect_ratio" field.
func AspectRatioLTE(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAspectRatio), v))
	})
}

// AspectRatioContains applies the Contains predicate on the "aspect_ratio" field.
func AspectRatioContains(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAspectRatio), v))
	})
}

// AspectRatioHasPrefix applies the HasPrefix predicate on the "aspect_ratio" field.
func AspectRatioHasPrefix(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAspectRatio), v))
	})
}

// AspectRatioHasSuffix applies the HasSuffix predicate on the "aspect_ratio" field.
func AspectRatioHasSuffix(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAspectRatio), v))
	})
}

// AspectRatioEqualFold applies the EqualFold predicate on the "aspect_ratio" field.
func AspectRatioEqualFold(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAspectRatio), v))
	})
}

// AspectRatioContainsFold applies the ContainsFold predicate on the "aspect_ratio" field.
func AspectRatioContainsFold(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAspectRatio), v))
	})
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWidth), v))
	})
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWidth), v))
	})
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...int) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWidth), v...))
	})
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...int) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWidth), v...))
	})
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWidth), v))
	})
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWidth), v))
	})
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWidth), v))
	})
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWidth), v))
	})
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeight), v))
	})
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeight), v))
	})
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...int) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHeight), v...))
	})
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...int) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHeight), v...))
	})
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeight), v))
	})
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeight), v))
	})
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeight), v))
	})
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeight), v))
	})
}

// DurationSecondsEQ applies the EQ predicate on the "duration_seconds" field.
func DurationSecondsEQ(v float64) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDurationSeconds), v))
	})
}

// DurationSecondsNEQ applies the NEQ predicate on the "duration_seconds" field.
func DurationSecondsNEQ(v float64) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDurationSeconds), v))
	})
}

// DurationSecondsIn applies the In predicate on the "duration_seconds" field.
func DurationSecondsIn(vs ...float64) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDurationSeconds), v...))
	})
}

// DurationSecondsNotIn applies the NotIn predicate on the "duration_seconds" field.
func DurationSecondsNotIn(vs ...float64) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDurationSeconds), v...))
	})
}

// DurationSecondsGT applies the GT predicate on the "duration_seconds" field.
func DurationSecondsGT(v float64) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDurationSeconds), v))
	})
}

// DurationSecondsGTE applies the GTE predicate on the "duration_seconds" field.
func DurationSecondsGTE(v float64) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDurationSeconds), v))
	})
}

// DurationSecondsLT applies the LT predicate on the "duration_seconds" field.
func DurationSecondsLT(v float64) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDurationSeconds), v))
	})
}

// DurationSecondsLTE applies the LTE predicate on the "duration_seconds" field.
func DurationSecondsLTE(v float64) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDurationSeconds), v))
	})
}

// VideoBitrateEQ applies the EQ predicate on the "video_bitrate" field.
func VideoBitrateEQ(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVideoBitrate), v))
	})
}

// VideoBitrateNEQ applies the NEQ predicate on the "video_bitrate" field.
func VideoBitrateNEQ(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVideoBitrate), v))
	})
}

// VideoBitrateIn applies the In predicate on the "video_bitrate" field.
func VideoBitrateIn(vs ...int) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVideoBitrate), v...))
	})
}

// VideoBitrateNotIn applies the NotIn predicate on the "video_bitrate" field.
func VideoBitrateNotIn(vs ...int) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVideoBitrate), v...))
	})
}

// VideoBitrateGT applies the GT predicate on the "video_bitrate" field.
func VideoBitrateGT(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVideoBitrate), v))
	})
}

// VideoBitrateGTE applies the GTE predicate on the "video_bitrate" field.
func VideoBitrateGTE(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVideoBitrate), v))
	})
}

// VideoBitrateLT applies the LT predicate on the "video_bitrate" field.
func VideoBitrateLT(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVideoBitrate), v))
	})
}

// VideoBitrateLTE applies the LTE predicate on the "video_bitrate" field.
func VideoBitrateLTE(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVideoBitrate), v))
	})
}

// AudioBitrateEQ applies the EQ predicate on the "audio_bitrate" field.
func AudioBitrateEQ(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAudioBitrate), v))
	})
}

// AudioBitrateNEQ applies the NEQ predicate on the "audio_bitrate" field.
func AudioBitrateNEQ(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAudioBitrate), v))
	})
}

// AudioBitrateIn applies the In predicate on the "audio_bitrate" field.
func AudioBitrateIn(vs ...int) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAudioBitrate), v...))
	})
}

// AudioBitrateNotIn applies the NotIn predicate on the "audio_bitrate" field.
func AudioBitrateNotIn(vs ...int) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAudioBitrate), v...))
	})
}

// AudioBitrateGT applies the GT predicate on the "audio_bitrate" field.
func AudioBitrateGT(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAudioBitrate), v))
	})
}

// AudioBitrateGTE applies the GTE predicate on the "audio_bitrate" field.
func AudioBitrateGTE(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAudioBitrate), v))
	})
}

// AudioBitrateLT applies the LT predicate on the "audio_bitrate" field.
func AudioBitrateLT(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAudioBitrate), v))
	})
}

// AudioBitrateLTE applies the LTE predicate on the "audio_bitrate" field.
func AudioBitrateLTE(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAudioBitrate), v))
	})
}

// FramerateEQ applies the EQ predicate on the "framerate" field.
func FramerateEQ(v float64) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFramerate), v))
	})
}

// FramerateNEQ applies the NEQ predicate on the "framerate" field.
func FramerateNEQ(v float64) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFramerate), v))
	})
}

// FramerateIn applies the In predicate on the "framerate" field.
func FramerateIn(vs ...float64) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFramerate), v...))
	})
}

// FramerateNotIn applies the NotIn predicate on the "framerate" field.
func FramerateNotIn(vs ...float64) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFramerate), v...))
	})
}

// FramerateGT applies the GT predicate on the "framerate" field.
func FramerateGT(v float64) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFramerate), v))
	})
}

// FramerateGTE applies the GTE predicate on the "framerate" field.
func FramerateGTE(v float64) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFramerate), v))
	})
}

// FramerateLT applies the LT predicate on the "framerate" field.
func FramerateLT(v float64) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFramerate), v))
	})
}

// FramerateLTE applies the LTE predicate on the "framerate" field.
func FramerateLTE(v float64) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFramerate), v))
	})
}

// FormatEQ applies the EQ predicate on the "format" field.
func FormatEQ(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFormat), v))
	})
}

// FormatNEQ applies the NEQ predicate on the "format" field.
func FormatNEQ(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFormat), v))
	})
}

// FormatIn applies the In predicate on the "format" field.
func FormatIn(vs ...string) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFormat), v...))
	})
}

// FormatNotIn applies the NotIn predicate on the "format" field.
func FormatNotIn(vs ...string) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFormat), v...))
	})
}

// FormatGT applies the GT predicate on the "format" field.
func FormatGT(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFormat), v))
	})
}

// FormatGTE applies the GTE predicate on the "format" field.
func FormatGTE(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFormat), v))
	})
}

// FormatLT applies the LT predicate on the "format" field.
func FormatLT(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFormat), v))
	})
}

// FormatLTE applies the LTE predicate on the "format" field.
func FormatLTE(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFormat), v))
	})
}

// FormatContains applies the Contains predicate on the "format" field.
func FormatContains(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFormat), v))
	})
}

// FormatHasPrefix applies the HasPrefix predicate on the "format" field.
func FormatHasPrefix(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFormat), v))
	})
}

// FormatHasSuffix applies the HasSuffix predicate on the "format" field.
func FormatHasSuffix(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFormat), v))
	})
}

// FormatEqualFold applies the EqualFold predicate on the "format" field.
func FormatEqualFold(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFormat), v))
	})
}

// FormatContainsFold applies the ContainsFold predicate on the "format" field.
func FormatContainsFold(v string) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFormat), v))
	})
}

// NbStreamsEQ applies the EQ predicate on the "nb_streams" field.
func NbStreamsEQ(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNbStreams), v))
	})
}

// NbStreamsNEQ applies the NEQ predicate on the "nb_streams" field.
func NbStreamsNEQ(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNbStreams), v))
	})
}

// NbStreamsIn applies the In predicate on the "nb_streams" field.
func NbStreamsIn(vs ...int) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNbStreams), v...))
	})
}

// NbStreamsNotIn applies the NotIn predicate on the "nb_streams" field.
func NbStreamsNotIn(vs ...int) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNbStreams), v...))
	})
}

// NbStreamsGT applies the GT predicate on the "nb_streams" field.
func NbStreamsGT(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNbStreams), v))
	})
}

// NbStreamsGTE applies the GTE predicate on the "nb_streams" field.
func NbStreamsGTE(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNbStreams), v))
	})
}

// NbStreamsLT applies the LT predicate on the "nb_streams" field.
func NbStreamsLT(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNbStreams), v))
	})
}

// NbStreamsLTE applies the LTE predicate on the "nb_streams" field.
func NbStreamsLTE(v int) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNbStreams), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Probe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Probe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasMedia applies the HasEdge predicate on the "media" edge.
func HasMedia() predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MediaTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, MediaTable, MediaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMediaWith applies the HasEdge predicate on the "media" edge with a given conditions (other predicates).
func HasMediaWith(preds ...predicate.Media) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MediaInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, MediaTable, MediaColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Probe) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Probe) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Probe) predicate.Probe {
	return predicate.Probe(func(s *sql.Selector) {
		p(s.Not())
	})
}
