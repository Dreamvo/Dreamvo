// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/dreamvo/gilfoyle/ent/media"
	"github.com/dreamvo/gilfoyle/ent/mediaevents"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// MediaEventsCreate is the builder for creating a MediaEvents entity.
type MediaEventsCreate struct {
	config
	mutation *MediaEventsMutation
	hooks    []Hook
}

// SetLevel sets the level field.
func (mec *MediaEventsCreate) SetLevel(m mediaevents.Level) *MediaEventsCreate {
	mec.mutation.SetLevel(m)
	return mec
}

// SetNillableLevel sets the level field if the given value is not nil.
func (mec *MediaEventsCreate) SetNillableLevel(m *mediaevents.Level) *MediaEventsCreate {
	if m != nil {
		mec.SetLevel(*m)
	}
	return mec
}

// SetReason sets the reason field.
func (mec *MediaEventsCreate) SetReason(s string) *MediaEventsCreate {
	mec.mutation.SetReason(s)
	return mec
}

// SetMessage sets the message field.
func (mec *MediaEventsCreate) SetMessage(s string) *MediaEventsCreate {
	mec.mutation.SetMessage(s)
	return mec
}

// SetCreatedAt sets the created_at field.
func (mec *MediaEventsCreate) SetCreatedAt(t time.Time) *MediaEventsCreate {
	mec.mutation.SetCreatedAt(t)
	return mec
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (mec *MediaEventsCreate) SetNillableCreatedAt(t *time.Time) *MediaEventsCreate {
	if t != nil {
		mec.SetCreatedAt(*t)
	}
	return mec
}

// SetID sets the id field.
func (mec *MediaEventsCreate) SetID(u uuid.UUID) *MediaEventsCreate {
	mec.mutation.SetID(u)
	return mec
}

// SetMediaID sets the media edge to Media by id.
func (mec *MediaEventsCreate) SetMediaID(id uuid.UUID) *MediaEventsCreate {
	mec.mutation.SetMediaID(id)
	return mec
}

// SetMedia sets the media edge to Media.
func (mec *MediaEventsCreate) SetMedia(m *Media) *MediaEventsCreate {
	return mec.SetMediaID(m.ID)
}

// Mutation returns the MediaEventsMutation object of the builder.
func (mec *MediaEventsCreate) Mutation() *MediaEventsMutation {
	return mec.mutation
}

// Save creates the MediaEvents in the database.
func (mec *MediaEventsCreate) Save(ctx context.Context) (*MediaEvents, error) {
	var (
		err  error
		node *MediaEvents
	)
	mec.defaults()
	if len(mec.hooks) == 0 {
		if err = mec.check(); err != nil {
			return nil, err
		}
		node, err = mec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MediaEventsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mec.check(); err != nil {
				return nil, err
			}
			mec.mutation = mutation
			node, err = mec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mec.hooks) - 1; i >= 0; i-- {
			mut = mec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mec *MediaEventsCreate) SaveX(ctx context.Context) *MediaEvents {
	v, err := mec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (mec *MediaEventsCreate) defaults() {
	if _, ok := mec.mutation.Level(); !ok {
		v := mediaevents.DefaultLevel
		mec.mutation.SetLevel(v)
	}
	if _, ok := mec.mutation.CreatedAt(); !ok {
		v := mediaevents.DefaultCreatedAt()
		mec.mutation.SetCreatedAt(v)
	}
	if _, ok := mec.mutation.ID(); !ok {
		v := mediaevents.DefaultID()
		mec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mec *MediaEventsCreate) check() error {
	if _, ok := mec.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New("ent: missing required field \"level\"")}
	}
	if v, ok := mec.mutation.Level(); ok {
		if err := mediaevents.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf("ent: validator failed for field \"level\": %w", err)}
		}
	}
	if _, ok := mec.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New("ent: missing required field \"reason\"")}
	}
	if v, ok := mec.mutation.Reason(); ok {
		if err := mediaevents.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf("ent: validator failed for field \"reason\": %w", err)}
		}
	}
	if _, ok := mec.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New("ent: missing required field \"message\"")}
	}
	if v, ok := mec.mutation.Message(); ok {
		if err := mediaevents.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf("ent: validator failed for field \"message\": %w", err)}
		}
	}
	if _, ok := mec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := mec.mutation.MediaID(); !ok {
		return &ValidationError{Name: "media", err: errors.New("ent: missing required edge \"media\"")}
	}
	return nil
}

func (mec *MediaEventsCreate) sqlSave(ctx context.Context) (*MediaEvents, error) {
	_node, _spec := mec.createSpec()
	if err := sqlgraph.CreateNode(ctx, mec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (mec *MediaEventsCreate) createSpec() (*MediaEvents, *sqlgraph.CreateSpec) {
	var (
		_node = &MediaEvents{config: mec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mediaevents.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mediaevents.FieldID,
			},
		}
	)
	if id, ok := mec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mec.mutation.Level(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mediaevents.FieldLevel,
		})
		_node.Level = value
	}
	if value, ok := mec.mutation.Reason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediaevents.FieldReason,
		})
		_node.Reason = value
	}
	if value, ok := mec.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mediaevents.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := mec.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mediaevents.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := mec.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mediaevents.MediaTable,
			Columns: []string{mediaevents.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: media.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MediaEventsCreateBulk is the builder for creating a bulk of MediaEvents entities.
type MediaEventsCreateBulk struct {
	config
	builders []*MediaEventsCreate
}

// Save creates the MediaEvents entities in the database.
func (mecb *MediaEventsCreateBulk) Save(ctx context.Context) ([]*MediaEvents, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mecb.builders))
	nodes := make([]*MediaEvents, len(mecb.builders))
	mutators := make([]Mutator, len(mecb.builders))
	for i := range mecb.builders {
		func(i int, root context.Context) {
			builder := mecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MediaEventsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mecb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mecb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (mecb *MediaEventsCreateBulk) SaveX(ctx context.Context) []*MediaEvents {
	v, err := mecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
