// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/dreamvo/gilfoyle/ent/media"
	"github.com/dreamvo/gilfoyle/ent/probe"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// ProbeCreate is the builder for creating a Probe entity.
type ProbeCreate struct {
	config
	mutation *ProbeMutation
	hooks    []Hook
}

// SetFilename sets the filename field.
func (pc *ProbeCreate) SetFilename(s string) *ProbeCreate {
	pc.mutation.SetFilename(s)
	return pc
}

// SetFilesize sets the filesize field.
func (pc *ProbeCreate) SetFilesize(i int) *ProbeCreate {
	pc.mutation.SetFilesize(i)
	return pc
}

// SetNillableFilesize sets the filesize field if the given value is not nil.
func (pc *ProbeCreate) SetNillableFilesize(i *int) *ProbeCreate {
	if i != nil {
		pc.SetFilesize(*i)
	}
	return pc
}

// SetChecksumSha256 sets the checksum_sha256 field.
func (pc *ProbeCreate) SetChecksumSha256(s string) *ProbeCreate {
	pc.mutation.SetChecksumSha256(s)
	return pc
}

// SetAspectRatio sets the aspect_ratio field.
func (pc *ProbeCreate) SetAspectRatio(s string) *ProbeCreate {
	pc.mutation.SetAspectRatio(s)
	return pc
}

// SetNillableAspectRatio sets the aspect_ratio field if the given value is not nil.
func (pc *ProbeCreate) SetNillableAspectRatio(s *string) *ProbeCreate {
	if s != nil {
		pc.SetAspectRatio(*s)
	}
	return pc
}

// SetWidth sets the width field.
func (pc *ProbeCreate) SetWidth(i int) *ProbeCreate {
	pc.mutation.SetWidth(i)
	return pc
}

// SetHeight sets the height field.
func (pc *ProbeCreate) SetHeight(i int) *ProbeCreate {
	pc.mutation.SetHeight(i)
	return pc
}

// SetDurationSeconds sets the duration_seconds field.
func (pc *ProbeCreate) SetDurationSeconds(f float64) *ProbeCreate {
	pc.mutation.SetDurationSeconds(f)
	return pc
}

// SetNillableDurationSeconds sets the duration_seconds field if the given value is not nil.
func (pc *ProbeCreate) SetNillableDurationSeconds(f *float64) *ProbeCreate {
	if f != nil {
		pc.SetDurationSeconds(*f)
	}
	return pc
}

// SetVideoBitrate sets the video_bitrate field.
func (pc *ProbeCreate) SetVideoBitrate(i int) *ProbeCreate {
	pc.mutation.SetVideoBitrate(i)
	return pc
}

// SetNillableVideoBitrate sets the video_bitrate field if the given value is not nil.
func (pc *ProbeCreate) SetNillableVideoBitrate(i *int) *ProbeCreate {
	if i != nil {
		pc.SetVideoBitrate(*i)
	}
	return pc
}

// SetAudioBitrate sets the audio_bitrate field.
func (pc *ProbeCreate) SetAudioBitrate(i int) *ProbeCreate {
	pc.mutation.SetAudioBitrate(i)
	return pc
}

// SetNillableAudioBitrate sets the audio_bitrate field if the given value is not nil.
func (pc *ProbeCreate) SetNillableAudioBitrate(i *int) *ProbeCreate {
	if i != nil {
		pc.SetAudioBitrate(*i)
	}
	return pc
}

// SetFramerate sets the framerate field.
func (pc *ProbeCreate) SetFramerate(f float64) *ProbeCreate {
	pc.mutation.SetFramerate(f)
	return pc
}

// SetFormat sets the format field.
func (pc *ProbeCreate) SetFormat(s string) *ProbeCreate {
	pc.mutation.SetFormat(s)
	return pc
}

// SetNbStreams sets the nb_streams field.
func (pc *ProbeCreate) SetNbStreams(i int) *ProbeCreate {
	pc.mutation.SetNbStreams(i)
	return pc
}

// SetNillableNbStreams sets the nb_streams field if the given value is not nil.
func (pc *ProbeCreate) SetNillableNbStreams(i *int) *ProbeCreate {
	if i != nil {
		pc.SetNbStreams(*i)
	}
	return pc
}

// SetCreatedAt sets the created_at field.
func (pc *ProbeCreate) SetCreatedAt(t time.Time) *ProbeCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (pc *ProbeCreate) SetNillableCreatedAt(t *time.Time) *ProbeCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the updated_at field.
func (pc *ProbeCreate) SetUpdatedAt(t time.Time) *ProbeCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (pc *ProbeCreate) SetNillableUpdatedAt(t *time.Time) *ProbeCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetID sets the id field.
func (pc *ProbeCreate) SetID(u uuid.UUID) *ProbeCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetMediaID sets the media edge to Media by id.
func (pc *ProbeCreate) SetMediaID(id uuid.UUID) *ProbeCreate {
	pc.mutation.SetMediaID(id)
	return pc
}

// SetMedia sets the media edge to Media.
func (pc *ProbeCreate) SetMedia(m *Media) *ProbeCreate {
	return pc.SetMediaID(m.ID)
}

// Mutation returns the ProbeMutation object of the builder.
func (pc *ProbeCreate) Mutation() *ProbeMutation {
	return pc.mutation
}

// Save creates the Probe in the database.
func (pc *ProbeCreate) Save(ctx context.Context) (*Probe, error) {
	var (
		err  error
		node *Probe
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProbeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProbeCreate) SaveX(ctx context.Context) *Probe {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (pc *ProbeCreate) defaults() {
	if _, ok := pc.mutation.Filesize(); !ok {
		v := probe.DefaultFilesize
		pc.mutation.SetFilesize(v)
	}
	if _, ok := pc.mutation.AspectRatio(); !ok {
		v := probe.DefaultAspectRatio
		pc.mutation.SetAspectRatio(v)
	}
	if _, ok := pc.mutation.DurationSeconds(); !ok {
		v := probe.DefaultDurationSeconds
		pc.mutation.SetDurationSeconds(v)
	}
	if _, ok := pc.mutation.VideoBitrate(); !ok {
		v := probe.DefaultVideoBitrate
		pc.mutation.SetVideoBitrate(v)
	}
	if _, ok := pc.mutation.AudioBitrate(); !ok {
		v := probe.DefaultAudioBitrate
		pc.mutation.SetAudioBitrate(v)
	}
	if _, ok := pc.mutation.NbStreams(); !ok {
		v := probe.DefaultNbStreams
		pc.mutation.SetNbStreams(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := probe.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := probe.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := probe.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProbeCreate) check() error {
	if _, ok := pc.mutation.Filename(); !ok {
		return &ValidationError{Name: "filename", err: errors.New("ent: missing required field \"filename\"")}
	}
	if v, ok := pc.mutation.Filename(); ok {
		if err := probe.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf("ent: validator failed for field \"filename\": %w", err)}
		}
	}
	if _, ok := pc.mutation.Filesize(); !ok {
		return &ValidationError{Name: "filesize", err: errors.New("ent: missing required field \"filesize\"")}
	}
	if v, ok := pc.mutation.Filesize(); ok {
		if err := probe.FilesizeValidator(v); err != nil {
			return &ValidationError{Name: "filesize", err: fmt.Errorf("ent: validator failed for field \"filesize\": %w", err)}
		}
	}
	if _, ok := pc.mutation.ChecksumSha256(); !ok {
		return &ValidationError{Name: "checksum_sha256", err: errors.New("ent: missing required field \"checksum_sha256\"")}
	}
	if v, ok := pc.mutation.ChecksumSha256(); ok {
		if err := probe.ChecksumSha256Validator(v); err != nil {
			return &ValidationError{Name: "checksum_sha256", err: fmt.Errorf("ent: validator failed for field \"checksum_sha256\": %w", err)}
		}
	}
	if _, ok := pc.mutation.AspectRatio(); !ok {
		return &ValidationError{Name: "aspect_ratio", err: errors.New("ent: missing required field \"aspect_ratio\"")}
	}
	if v, ok := pc.mutation.AspectRatio(); ok {
		if err := probe.AspectRatioValidator(v); err != nil {
			return &ValidationError{Name: "aspect_ratio", err: fmt.Errorf("ent: validator failed for field \"aspect_ratio\": %w", err)}
		}
	}
	if _, ok := pc.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New("ent: missing required field \"width\"")}
	}
	if v, ok := pc.mutation.Width(); ok {
		if err := probe.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf("ent: validator failed for field \"width\": %w", err)}
		}
	}
	if _, ok := pc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New("ent: missing required field \"height\"")}
	}
	if v, ok := pc.mutation.Height(); ok {
		if err := probe.HeightValidator(v); err != nil {
			return &ValidationError{Name: "height", err: fmt.Errorf("ent: validator failed for field \"height\": %w", err)}
		}
	}
	if _, ok := pc.mutation.DurationSeconds(); !ok {
		return &ValidationError{Name: "duration_seconds", err: errors.New("ent: missing required field \"duration_seconds\"")}
	}
	if v, ok := pc.mutation.DurationSeconds(); ok {
		if err := probe.DurationSecondsValidator(v); err != nil {
			return &ValidationError{Name: "duration_seconds", err: fmt.Errorf("ent: validator failed for field \"duration_seconds\": %w", err)}
		}
	}
	if _, ok := pc.mutation.VideoBitrate(); !ok {
		return &ValidationError{Name: "video_bitrate", err: errors.New("ent: missing required field \"video_bitrate\"")}
	}
	if v, ok := pc.mutation.VideoBitrate(); ok {
		if err := probe.VideoBitrateValidator(v); err != nil {
			return &ValidationError{Name: "video_bitrate", err: fmt.Errorf("ent: validator failed for field \"video_bitrate\": %w", err)}
		}
	}
	if _, ok := pc.mutation.AudioBitrate(); !ok {
		return &ValidationError{Name: "audio_bitrate", err: errors.New("ent: missing required field \"audio_bitrate\"")}
	}
	if v, ok := pc.mutation.AudioBitrate(); ok {
		if err := probe.AudioBitrateValidator(v); err != nil {
			return &ValidationError{Name: "audio_bitrate", err: fmt.Errorf("ent: validator failed for field \"audio_bitrate\": %w", err)}
		}
	}
	if _, ok := pc.mutation.Framerate(); !ok {
		return &ValidationError{Name: "framerate", err: errors.New("ent: missing required field \"framerate\"")}
	}
	if v, ok := pc.mutation.Framerate(); ok {
		if err := probe.FramerateValidator(v); err != nil {
			return &ValidationError{Name: "framerate", err: fmt.Errorf("ent: validator failed for field \"framerate\": %w", err)}
		}
	}
	if _, ok := pc.mutation.Format(); !ok {
		return &ValidationError{Name: "format", err: errors.New("ent: missing required field \"format\"")}
	}
	if v, ok := pc.mutation.Format(); ok {
		if err := probe.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf("ent: validator failed for field \"format\": %w", err)}
		}
	}
	if _, ok := pc.mutation.NbStreams(); !ok {
		return &ValidationError{Name: "nb_streams", err: errors.New("ent: missing required field \"nb_streams\"")}
	}
	if v, ok := pc.mutation.NbStreams(); ok {
		if err := probe.NbStreamsValidator(v); err != nil {
			return &ValidationError{Name: "nb_streams", err: fmt.Errorf("ent: validator failed for field \"nb_streams\": %w", err)}
		}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := pc.mutation.MediaID(); !ok {
		return &ValidationError{Name: "media", err: errors.New("ent: missing required edge \"media\"")}
	}
	return nil
}

func (pc *ProbeCreate) sqlSave(ctx context.Context) (*Probe, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (pc *ProbeCreate) createSpec() (*Probe, *sqlgraph.CreateSpec) {
	var (
		_node = &Probe{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: probe.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: probe.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Filename(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: probe.FieldFilename,
		})
		_node.Filename = value
	}
	if value, ok := pc.mutation.Filesize(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldFilesize,
		})
		_node.Filesize = value
	}
	if value, ok := pc.mutation.ChecksumSha256(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: probe.FieldChecksumSha256,
		})
		_node.ChecksumSha256 = value
	}
	if value, ok := pc.mutation.AspectRatio(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: probe.FieldAspectRatio,
		})
		_node.AspectRatio = value
	}
	if value, ok := pc.mutation.Width(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldWidth,
		})
		_node.Width = value
	}
	if value, ok := pc.mutation.Height(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldHeight,
		})
		_node.Height = value
	}
	if value, ok := pc.mutation.DurationSeconds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: probe.FieldDurationSeconds,
		})
		_node.DurationSeconds = value
	}
	if value, ok := pc.mutation.VideoBitrate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldVideoBitrate,
		})
		_node.VideoBitrate = value
	}
	if value, ok := pc.mutation.AudioBitrate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldAudioBitrate,
		})
		_node.AudioBitrate = value
	}
	if value, ok := pc.mutation.Framerate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: probe.FieldFramerate,
		})
		_node.Framerate = value
	}
	if value, ok := pc.mutation.Format(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: probe.FieldFormat,
		})
		_node.Format = value
	}
	if value, ok := pc.mutation.NbStreams(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: probe.FieldNbStreams,
		})
		_node.NbStreams = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: probe.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: probe.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := pc.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   probe.MediaTable,
			Columns: []string{probe.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: media.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProbeCreateBulk is the builder for creating a bulk of Probe entities.
type ProbeCreateBulk struct {
	config
	builders []*ProbeCreate
}

// Save creates the Probe entities in the database.
func (pcb *ProbeCreateBulk) Save(ctx context.Context) ([]*Probe, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Probe, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProbeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (pcb *ProbeCreateBulk) SaveX(ctx context.Context) []*Probe {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
