// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/dreamvo/gilfoyle/ent/media"
	"github.com/dreamvo/gilfoyle/ent/mediafile"
	"github.com/dreamvo/gilfoyle/ent/predicate"
	"github.com/google/uuid"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMedia     = "Media"
	TypeMediaFile = "MediaFile"
)

// MediaMutation represents an operation that mutates the Media nodes in the graph.
type MediaMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	title              *string
	original_filename  *string
	status             *media.Status
	created_at         *time.Time
	updated_at         *time.Time
	clearedFields      map[string]struct{}
	media_files        map[uuid.UUID]struct{}
	removedmedia_files map[uuid.UUID]struct{}
	clearedmedia_files bool
	done               bool
	oldValue           func(context.Context) (*Media, error)
	predicates         []predicate.Media
}

var _ ent.Mutation = (*MediaMutation)(nil)

// mediaOption allows management of the mutation configuration using functional options.
type mediaOption func(*MediaMutation)

// newMediaMutation creates new mutation for the Media entity.
func newMediaMutation(c config, op Op, opts ...mediaOption) *MediaMutation {
	m := &MediaMutation{
		config:        c,
		op:            op,
		typ:           TypeMedia,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMediaID sets the ID field of the mutation.
func withMediaID(id uuid.UUID) mediaOption {
	return func(m *MediaMutation) {
		var (
			err   error
			once  sync.Once
			value *Media
		)
		m.oldValue = func(ctx context.Context) (*Media, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Media.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedia sets the old Media of the mutation.
func withMedia(node *Media) mediaOption {
	return func(m *MediaMutation) {
		m.oldValue = func(context.Context) (*Media, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MediaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MediaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Media entities.
func (m *MediaMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *MediaMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitle sets the "title" field.
func (m *MediaMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *MediaMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *MediaMutation) ResetTitle() {
	m.title = nil
}

// SetOriginalFilename sets the "original_filename" field.
func (m *MediaMutation) SetOriginalFilename(s string) {
	m.original_filename = &s
}

// OriginalFilename returns the value of the "original_filename" field in the mutation.
func (m *MediaMutation) OriginalFilename() (r string, exists bool) {
	v := m.original_filename
	if v == nil {
		return
	}
	return *v, true
}

// OldOriginalFilename returns the old "original_filename" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldOriginalFilename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOriginalFilename is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOriginalFilename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOriginalFilename: %w", err)
	}
	return oldValue.OriginalFilename, nil
}

// ClearOriginalFilename clears the value of the "original_filename" field.
func (m *MediaMutation) ClearOriginalFilename() {
	m.original_filename = nil
	m.clearedFields[media.FieldOriginalFilename] = struct{}{}
}

// OriginalFilenameCleared returns if the "original_filename" field was cleared in this mutation.
func (m *MediaMutation) OriginalFilenameCleared() bool {
	_, ok := m.clearedFields[media.FieldOriginalFilename]
	return ok
}

// ResetOriginalFilename resets all changes to the "original_filename" field.
func (m *MediaMutation) ResetOriginalFilename() {
	m.original_filename = nil
	delete(m.clearedFields, media.FieldOriginalFilename)
}

// SetStatus sets the "status" field.
func (m *MediaMutation) SetStatus(value media.Status) {
	m.status = &value
}

// Status returns the value of the "status" field in the mutation.
func (m *MediaMutation) Status() (r media.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldStatus(ctx context.Context) (v media.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *MediaMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *MediaMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MediaMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MediaMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MediaMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MediaMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Media entity.
// If the Media object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MediaMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddMediaFileIDs adds the "media_files" edge to the MediaFile entity by ids.
func (m *MediaMutation) AddMediaFileIDs(ids ...uuid.UUID) {
	if m.media_files == nil {
		m.media_files = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.media_files[ids[i]] = struct{}{}
	}
}

// ClearMediaFiles clears the "media_files" edge to the MediaFile entity.
func (m *MediaMutation) ClearMediaFiles() {
	m.clearedmedia_files = true
}

// MediaFilesCleared returns if the "media_files" edge to the MediaFile entity was cleared.
func (m *MediaMutation) MediaFilesCleared() bool {
	return m.clearedmedia_files
}

// RemoveMediaFileIDs removes the "media_files" edge to the MediaFile entity by IDs.
func (m *MediaMutation) RemoveMediaFileIDs(ids ...uuid.UUID) {
	if m.removedmedia_files == nil {
		m.removedmedia_files = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.removedmedia_files[ids[i]] = struct{}{}
	}
}

// RemovedMediaFiles returns the removed IDs of the "media_files" edge to the MediaFile entity.
func (m *MediaMutation) RemovedMediaFilesIDs() (ids []uuid.UUID) {
	for id := range m.removedmedia_files {
		ids = append(ids, id)
	}
	return
}

// MediaFilesIDs returns the "media_files" edge IDs in the mutation.
func (m *MediaMutation) MediaFilesIDs() (ids []uuid.UUID) {
	for id := range m.media_files {
		ids = append(ids, id)
	}
	return
}

// ResetMediaFiles resets all changes to the "media_files" edge.
func (m *MediaMutation) ResetMediaFiles() {
	m.media_files = nil
	m.clearedmedia_files = false
	m.removedmedia_files = nil
}

// Op returns the operation name.
func (m *MediaMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Media).
func (m *MediaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MediaMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.title != nil {
		fields = append(fields, media.FieldTitle)
	}
	if m.original_filename != nil {
		fields = append(fields, media.FieldOriginalFilename)
	}
	if m.status != nil {
		fields = append(fields, media.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, media.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, media.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MediaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case media.FieldTitle:
		return m.Title()
	case media.FieldOriginalFilename:
		return m.OriginalFilename()
	case media.FieldStatus:
		return m.Status()
	case media.FieldCreatedAt:
		return m.CreatedAt()
	case media.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MediaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case media.FieldTitle:
		return m.OldTitle(ctx)
	case media.FieldOriginalFilename:
		return m.OldOriginalFilename(ctx)
	case media.FieldStatus:
		return m.OldStatus(ctx)
	case media.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case media.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Media field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case media.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case media.FieldOriginalFilename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOriginalFilename(v)
		return nil
	case media.FieldStatus:
		v, ok := value.(media.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case media.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case media.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Media field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MediaMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MediaMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Media numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MediaMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(media.FieldOriginalFilename) {
		fields = append(fields, media.FieldOriginalFilename)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MediaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MediaMutation) ClearField(name string) error {
	switch name {
	case media.FieldOriginalFilename:
		m.ClearOriginalFilename()
		return nil
	}
	return fmt.Errorf("unknown Media nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MediaMutation) ResetField(name string) error {
	switch name {
	case media.FieldTitle:
		m.ResetTitle()
		return nil
	case media.FieldOriginalFilename:
		m.ResetOriginalFilename()
		return nil
	case media.FieldStatus:
		m.ResetStatus()
		return nil
	case media.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case media.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Media field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MediaMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.media_files != nil {
		edges = append(edges, media.EdgeMediaFiles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MediaMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case media.EdgeMediaFiles:
		ids := make([]ent.Value, 0, len(m.media_files))
		for id := range m.media_files {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MediaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmedia_files != nil {
		edges = append(edges, media.EdgeMediaFiles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MediaMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case media.EdgeMediaFiles:
		ids := make([]ent.Value, 0, len(m.removedmedia_files))
		for id := range m.removedmedia_files {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MediaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmedia_files {
		edges = append(edges, media.EdgeMediaFiles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MediaMutation) EdgeCleared(name string) bool {
	switch name {
	case media.EdgeMediaFiles:
		return m.clearedmedia_files
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MediaMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Media unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MediaMutation) ResetEdge(name string) error {
	switch name {
	case media.EdgeMediaFiles:
		m.ResetMediaFiles()
		return nil
	}
	return fmt.Errorf("unknown Media edge %s", name)
}

// MediaFileMutation represents an operation that mutates the MediaFile nodes in the graph.
type MediaFileMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	rendition_name       *string
	format               *string
	target_bandwidth     *uint64
	addtarget_bandwidth  *uint64
	video_bitrate        *int64
	addvideo_bitrate     *int64
	resolution_width     *uint16
	addresolution_width  *uint16
	resolution_height    *uint16
	addresolution_height *uint16
	framerate            *uint8
	addframerate         *uint8
	duration_seconds     *float64
	addduration_seconds  *float64
	media_type           *mediafile.MediaType
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	media                *uuid.UUID
	clearedmedia         bool
	done                 bool
	oldValue             func(context.Context) (*MediaFile, error)
	predicates           []predicate.MediaFile
}

var _ ent.Mutation = (*MediaFileMutation)(nil)

// mediafileOption allows management of the mutation configuration using functional options.
type mediafileOption func(*MediaFileMutation)

// newMediaFileMutation creates new mutation for the MediaFile entity.
func newMediaFileMutation(c config, op Op, opts ...mediafileOption) *MediaFileMutation {
	m := &MediaFileMutation{
		config:        c,
		op:            op,
		typ:           TypeMediaFile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMediaFileID sets the ID field of the mutation.
func withMediaFileID(id uuid.UUID) mediafileOption {
	return func(m *MediaFileMutation) {
		var (
			err   error
			once  sync.Once
			value *MediaFile
		)
		m.oldValue = func(ctx context.Context) (*MediaFile, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MediaFile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMediaFile sets the old MediaFile of the mutation.
func withMediaFile(node *MediaFile) mediafileOption {
	return func(m *MediaFileMutation) {
		m.oldValue = func(context.Context) (*MediaFile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MediaFileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MediaFileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MediaFile entities.
func (m *MediaFileMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *MediaFileMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRenditionName sets the "rendition_name" field.
func (m *MediaFileMutation) SetRenditionName(s string) {
	m.rendition_name = &s
}

// RenditionName returns the value of the "rendition_name" field in the mutation.
func (m *MediaFileMutation) RenditionName() (r string, exists bool) {
	v := m.rendition_name
	if v == nil {
		return
	}
	return *v, true
}

// OldRenditionName returns the old "rendition_name" field's value of the MediaFile entity.
// If the MediaFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaFileMutation) OldRenditionName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRenditionName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRenditionName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRenditionName: %w", err)
	}
	return oldValue.RenditionName, nil
}

// ResetRenditionName resets all changes to the "rendition_name" field.
func (m *MediaFileMutation) ResetRenditionName() {
	m.rendition_name = nil
}

// SetFormat sets the "format" field.
func (m *MediaFileMutation) SetFormat(s string) {
	m.format = &s
}

// Format returns the value of the "format" field in the mutation.
func (m *MediaFileMutation) Format() (r string, exists bool) {
	v := m.format
	if v == nil {
		return
	}
	return *v, true
}

// OldFormat returns the old "format" field's value of the MediaFile entity.
// If the MediaFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaFileMutation) OldFormat(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFormat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFormat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormat: %w", err)
	}
	return oldValue.Format, nil
}

// ResetFormat resets all changes to the "format" field.
func (m *MediaFileMutation) ResetFormat() {
	m.format = nil
}

// SetTargetBandwidth sets the "target_bandwidth" field.
func (m *MediaFileMutation) SetTargetBandwidth(u uint64) {
	m.target_bandwidth = &u
	m.addtarget_bandwidth = nil
}

// TargetBandwidth returns the value of the "target_bandwidth" field in the mutation.
func (m *MediaFileMutation) TargetBandwidth() (r uint64, exists bool) {
	v := m.target_bandwidth
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetBandwidth returns the old "target_bandwidth" field's value of the MediaFile entity.
// If the MediaFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaFileMutation) OldTargetBandwidth(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTargetBandwidth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTargetBandwidth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetBandwidth: %w", err)
	}
	return oldValue.TargetBandwidth, nil
}

// AddTargetBandwidth adds u to the "target_bandwidth" field.
func (m *MediaFileMutation) AddTargetBandwidth(u uint64) {
	if m.addtarget_bandwidth != nil {
		*m.addtarget_bandwidth += u
	} else {
		m.addtarget_bandwidth = &u
	}
}

// AddedTargetBandwidth returns the value that was added to the "target_bandwidth" field in this mutation.
func (m *MediaFileMutation) AddedTargetBandwidth() (r uint64, exists bool) {
	v := m.addtarget_bandwidth
	if v == nil {
		return
	}
	return *v, true
}

// ResetTargetBandwidth resets all changes to the "target_bandwidth" field.
func (m *MediaFileMutation) ResetTargetBandwidth() {
	m.target_bandwidth = nil
	m.addtarget_bandwidth = nil
}

// SetVideoBitrate sets the "video_bitrate" field.
func (m *MediaFileMutation) SetVideoBitrate(i int64) {
	m.video_bitrate = &i
	m.addvideo_bitrate = nil
}

// VideoBitrate returns the value of the "video_bitrate" field in the mutation.
func (m *MediaFileMutation) VideoBitrate() (r int64, exists bool) {
	v := m.video_bitrate
	if v == nil {
		return
	}
	return *v, true
}

// OldVideoBitrate returns the old "video_bitrate" field's value of the MediaFile entity.
// If the MediaFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaFileMutation) OldVideoBitrate(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVideoBitrate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVideoBitrate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideoBitrate: %w", err)
	}
	return oldValue.VideoBitrate, nil
}

// AddVideoBitrate adds i to the "video_bitrate" field.
func (m *MediaFileMutation) AddVideoBitrate(i int64) {
	if m.addvideo_bitrate != nil {
		*m.addvideo_bitrate += i
	} else {
		m.addvideo_bitrate = &i
	}
}

// AddedVideoBitrate returns the value that was added to the "video_bitrate" field in this mutation.
func (m *MediaFileMutation) AddedVideoBitrate() (r int64, exists bool) {
	v := m.addvideo_bitrate
	if v == nil {
		return
	}
	return *v, true
}

// ResetVideoBitrate resets all changes to the "video_bitrate" field.
func (m *MediaFileMutation) ResetVideoBitrate() {
	m.video_bitrate = nil
	m.addvideo_bitrate = nil
}

// SetResolutionWidth sets the "resolution_width" field.
func (m *MediaFileMutation) SetResolutionWidth(u uint16) {
	m.resolution_width = &u
	m.addresolution_width = nil
}

// ResolutionWidth returns the value of the "resolution_width" field in the mutation.
func (m *MediaFileMutation) ResolutionWidth() (r uint16, exists bool) {
	v := m.resolution_width
	if v == nil {
		return
	}
	return *v, true
}

// OldResolutionWidth returns the old "resolution_width" field's value of the MediaFile entity.
// If the MediaFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaFileMutation) OldResolutionWidth(ctx context.Context) (v uint16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldResolutionWidth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldResolutionWidth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResolutionWidth: %w", err)
	}
	return oldValue.ResolutionWidth, nil
}

// AddResolutionWidth adds u to the "resolution_width" field.
func (m *MediaFileMutation) AddResolutionWidth(u uint16) {
	if m.addresolution_width != nil {
		*m.addresolution_width += u
	} else {
		m.addresolution_width = &u
	}
}

// AddedResolutionWidth returns the value that was added to the "resolution_width" field in this mutation.
func (m *MediaFileMutation) AddedResolutionWidth() (r uint16, exists bool) {
	v := m.addresolution_width
	if v == nil {
		return
	}
	return *v, true
}

// ResetResolutionWidth resets all changes to the "resolution_width" field.
func (m *MediaFileMutation) ResetResolutionWidth() {
	m.resolution_width = nil
	m.addresolution_width = nil
}

// SetResolutionHeight sets the "resolution_height" field.
func (m *MediaFileMutation) SetResolutionHeight(u uint16) {
	m.resolution_height = &u
	m.addresolution_height = nil
}

// ResolutionHeight returns the value of the "resolution_height" field in the mutation.
func (m *MediaFileMutation) ResolutionHeight() (r uint16, exists bool) {
	v := m.resolution_height
	if v == nil {
		return
	}
	return *v, true
}

// OldResolutionHeight returns the old "resolution_height" field's value of the MediaFile entity.
// If the MediaFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaFileMutation) OldResolutionHeight(ctx context.Context) (v uint16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldResolutionHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldResolutionHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResolutionHeight: %w", err)
	}
	return oldValue.ResolutionHeight, nil
}

// AddResolutionHeight adds u to the "resolution_height" field.
func (m *MediaFileMutation) AddResolutionHeight(u uint16) {
	if m.addresolution_height != nil {
		*m.addresolution_height += u
	} else {
		m.addresolution_height = &u
	}
}

// AddedResolutionHeight returns the value that was added to the "resolution_height" field in this mutation.
func (m *MediaFileMutation) AddedResolutionHeight() (r uint16, exists bool) {
	v := m.addresolution_height
	if v == nil {
		return
	}
	return *v, true
}

// ResetResolutionHeight resets all changes to the "resolution_height" field.
func (m *MediaFileMutation) ResetResolutionHeight() {
	m.resolution_height = nil
	m.addresolution_height = nil
}

// SetFramerate sets the "framerate" field.
func (m *MediaFileMutation) SetFramerate(u uint8) {
	m.framerate = &u
	m.addframerate = nil
}

// Framerate returns the value of the "framerate" field in the mutation.
func (m *MediaFileMutation) Framerate() (r uint8, exists bool) {
	v := m.framerate
	if v == nil {
		return
	}
	return *v, true
}

// OldFramerate returns the old "framerate" field's value of the MediaFile entity.
// If the MediaFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaFileMutation) OldFramerate(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFramerate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFramerate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFramerate: %w", err)
	}
	return oldValue.Framerate, nil
}

// AddFramerate adds u to the "framerate" field.
func (m *MediaFileMutation) AddFramerate(u uint8) {
	if m.addframerate != nil {
		*m.addframerate += u
	} else {
		m.addframerate = &u
	}
}

// AddedFramerate returns the value that was added to the "framerate" field in this mutation.
func (m *MediaFileMutation) AddedFramerate() (r uint8, exists bool) {
	v := m.addframerate
	if v == nil {
		return
	}
	return *v, true
}

// ResetFramerate resets all changes to the "framerate" field.
func (m *MediaFileMutation) ResetFramerate() {
	m.framerate = nil
	m.addframerate = nil
}

// SetDurationSeconds sets the "duration_seconds" field.
func (m *MediaFileMutation) SetDurationSeconds(f float64) {
	m.duration_seconds = &f
	m.addduration_seconds = nil
}

// DurationSeconds returns the value of the "duration_seconds" field in the mutation.
func (m *MediaFileMutation) DurationSeconds() (r float64, exists bool) {
	v := m.duration_seconds
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationSeconds returns the old "duration_seconds" field's value of the MediaFile entity.
// If the MediaFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaFileMutation) OldDurationSeconds(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDurationSeconds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDurationSeconds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationSeconds: %w", err)
	}
	return oldValue.DurationSeconds, nil
}

// AddDurationSeconds adds f to the "duration_seconds" field.
func (m *MediaFileMutation) AddDurationSeconds(f float64) {
	if m.addduration_seconds != nil {
		*m.addduration_seconds += f
	} else {
		m.addduration_seconds = &f
	}
}

// AddedDurationSeconds returns the value that was added to the "duration_seconds" field in this mutation.
func (m *MediaFileMutation) AddedDurationSeconds() (r float64, exists bool) {
	v := m.addduration_seconds
	if v == nil {
		return
	}
	return *v, true
}

// ResetDurationSeconds resets all changes to the "duration_seconds" field.
func (m *MediaFileMutation) ResetDurationSeconds() {
	m.duration_seconds = nil
	m.addduration_seconds = nil
}

// SetMediaType sets the "media_type" field.
func (m *MediaFileMutation) SetMediaType(mt mediafile.MediaType) {
	m.media_type = &mt
}

// MediaType returns the value of the "media_type" field in the mutation.
func (m *MediaFileMutation) MediaType() (r mediafile.MediaType, exists bool) {
	v := m.media_type
	if v == nil {
		return
	}
	return *v, true
}

// OldMediaType returns the old "media_type" field's value of the MediaFile entity.
// If the MediaFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaFileMutation) OldMediaType(ctx context.Context) (v mediafile.MediaType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMediaType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMediaType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMediaType: %w", err)
	}
	return oldValue.MediaType, nil
}

// ResetMediaType resets all changes to the "media_type" field.
func (m *MediaFileMutation) ResetMediaType() {
	m.media_type = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *MediaFileMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MediaFileMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the MediaFile entity.
// If the MediaFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaFileMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MediaFileMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MediaFileMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MediaFileMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the MediaFile entity.
// If the MediaFile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MediaFileMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MediaFileMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetMediaID sets the "media" edge to the Media entity by id.
func (m *MediaFileMutation) SetMediaID(id uuid.UUID) {
	m.media = &id
}

// ClearMedia clears the "media" edge to the Media entity.
func (m *MediaFileMutation) ClearMedia() {
	m.clearedmedia = true
}

// MediaCleared returns if the "media" edge to the Media entity was cleared.
func (m *MediaFileMutation) MediaCleared() bool {
	return m.clearedmedia
}

// MediaID returns the "media" edge ID in the mutation.
func (m *MediaFileMutation) MediaID() (id uuid.UUID, exists bool) {
	if m.media != nil {
		return *m.media, true
	}
	return
}

// MediaIDs returns the "media" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MediaID instead. It exists only for internal usage by the builders.
func (m *MediaFileMutation) MediaIDs() (ids []uuid.UUID) {
	if id := m.media; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMedia resets all changes to the "media" edge.
func (m *MediaFileMutation) ResetMedia() {
	m.media = nil
	m.clearedmedia = false
}

// Op returns the operation name.
func (m *MediaFileMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MediaFile).
func (m *MediaFileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MediaFileMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.rendition_name != nil {
		fields = append(fields, mediafile.FieldRenditionName)
	}
	if m.format != nil {
		fields = append(fields, mediafile.FieldFormat)
	}
	if m.target_bandwidth != nil {
		fields = append(fields, mediafile.FieldTargetBandwidth)
	}
	if m.video_bitrate != nil {
		fields = append(fields, mediafile.FieldVideoBitrate)
	}
	if m.resolution_width != nil {
		fields = append(fields, mediafile.FieldResolutionWidth)
	}
	if m.resolution_height != nil {
		fields = append(fields, mediafile.FieldResolutionHeight)
	}
	if m.framerate != nil {
		fields = append(fields, mediafile.FieldFramerate)
	}
	if m.duration_seconds != nil {
		fields = append(fields, mediafile.FieldDurationSeconds)
	}
	if m.media_type != nil {
		fields = append(fields, mediafile.FieldMediaType)
	}
	if m.created_at != nil {
		fields = append(fields, mediafile.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, mediafile.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MediaFileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mediafile.FieldRenditionName:
		return m.RenditionName()
	case mediafile.FieldFormat:
		return m.Format()
	case mediafile.FieldTargetBandwidth:
		return m.TargetBandwidth()
	case mediafile.FieldVideoBitrate:
		return m.VideoBitrate()
	case mediafile.FieldResolutionWidth:
		return m.ResolutionWidth()
	case mediafile.FieldResolutionHeight:
		return m.ResolutionHeight()
	case mediafile.FieldFramerate:
		return m.Framerate()
	case mediafile.FieldDurationSeconds:
		return m.DurationSeconds()
	case mediafile.FieldMediaType:
		return m.MediaType()
	case mediafile.FieldCreatedAt:
		return m.CreatedAt()
	case mediafile.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MediaFileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mediafile.FieldRenditionName:
		return m.OldRenditionName(ctx)
	case mediafile.FieldFormat:
		return m.OldFormat(ctx)
	case mediafile.FieldTargetBandwidth:
		return m.OldTargetBandwidth(ctx)
	case mediafile.FieldVideoBitrate:
		return m.OldVideoBitrate(ctx)
	case mediafile.FieldResolutionWidth:
		return m.OldResolutionWidth(ctx)
	case mediafile.FieldResolutionHeight:
		return m.OldResolutionHeight(ctx)
	case mediafile.FieldFramerate:
		return m.OldFramerate(ctx)
	case mediafile.FieldDurationSeconds:
		return m.OldDurationSeconds(ctx)
	case mediafile.FieldMediaType:
		return m.OldMediaType(ctx)
	case mediafile.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case mediafile.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown MediaFile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaFileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mediafile.FieldRenditionName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRenditionName(v)
		return nil
	case mediafile.FieldFormat:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormat(v)
		return nil
	case mediafile.FieldTargetBandwidth:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetBandwidth(v)
		return nil
	case mediafile.FieldVideoBitrate:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideoBitrate(v)
		return nil
	case mediafile.FieldResolutionWidth:
		v, ok := value.(uint16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResolutionWidth(v)
		return nil
	case mediafile.FieldResolutionHeight:
		v, ok := value.(uint16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResolutionHeight(v)
		return nil
	case mediafile.FieldFramerate:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFramerate(v)
		return nil
	case mediafile.FieldDurationSeconds:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationSeconds(v)
		return nil
	case mediafile.FieldMediaType:
		v, ok := value.(mediafile.MediaType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMediaType(v)
		return nil
	case mediafile.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case mediafile.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown MediaFile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MediaFileMutation) AddedFields() []string {
	var fields []string
	if m.addtarget_bandwidth != nil {
		fields = append(fields, mediafile.FieldTargetBandwidth)
	}
	if m.addvideo_bitrate != nil {
		fields = append(fields, mediafile.FieldVideoBitrate)
	}
	if m.addresolution_width != nil {
		fields = append(fields, mediafile.FieldResolutionWidth)
	}
	if m.addresolution_height != nil {
		fields = append(fields, mediafile.FieldResolutionHeight)
	}
	if m.addframerate != nil {
		fields = append(fields, mediafile.FieldFramerate)
	}
	if m.addduration_seconds != nil {
		fields = append(fields, mediafile.FieldDurationSeconds)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MediaFileMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case mediafile.FieldTargetBandwidth:
		return m.AddedTargetBandwidth()
	case mediafile.FieldVideoBitrate:
		return m.AddedVideoBitrate()
	case mediafile.FieldResolutionWidth:
		return m.AddedResolutionWidth()
	case mediafile.FieldResolutionHeight:
		return m.AddedResolutionHeight()
	case mediafile.FieldFramerate:
		return m.AddedFramerate()
	case mediafile.FieldDurationSeconds:
		return m.AddedDurationSeconds()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MediaFileMutation) AddField(name string, value ent.Value) error {
	switch name {
	case mediafile.FieldTargetBandwidth:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTargetBandwidth(v)
		return nil
	case mediafile.FieldVideoBitrate:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVideoBitrate(v)
		return nil
	case mediafile.FieldResolutionWidth:
		v, ok := value.(uint16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddResolutionWidth(v)
		return nil
	case mediafile.FieldResolutionHeight:
		v, ok := value.(uint16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddResolutionHeight(v)
		return nil
	case mediafile.FieldFramerate:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFramerate(v)
		return nil
	case mediafile.FieldDurationSeconds:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationSeconds(v)
		return nil
	}
	return fmt.Errorf("unknown MediaFile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MediaFileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MediaFileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MediaFileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MediaFile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MediaFileMutation) ResetField(name string) error {
	switch name {
	case mediafile.FieldRenditionName:
		m.ResetRenditionName()
		return nil
	case mediafile.FieldFormat:
		m.ResetFormat()
		return nil
	case mediafile.FieldTargetBandwidth:
		m.ResetTargetBandwidth()
		return nil
	case mediafile.FieldVideoBitrate:
		m.ResetVideoBitrate()
		return nil
	case mediafile.FieldResolutionWidth:
		m.ResetResolutionWidth()
		return nil
	case mediafile.FieldResolutionHeight:
		m.ResetResolutionHeight()
		return nil
	case mediafile.FieldFramerate:
		m.ResetFramerate()
		return nil
	case mediafile.FieldDurationSeconds:
		m.ResetDurationSeconds()
		return nil
	case mediafile.FieldMediaType:
		m.ResetMediaType()
		return nil
	case mediafile.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case mediafile.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown MediaFile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MediaFileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.media != nil {
		edges = append(edges, mediafile.EdgeMedia)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MediaFileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mediafile.EdgeMedia:
		if id := m.media; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MediaFileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MediaFileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MediaFileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmedia {
		edges = append(edges, mediafile.EdgeMedia)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MediaFileMutation) EdgeCleared(name string) bool {
	switch name {
	case mediafile.EdgeMedia:
		return m.clearedmedia
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MediaFileMutation) ClearEdge(name string) error {
	switch name {
	case mediafile.EdgeMedia:
		m.ClearMedia()
		return nil
	}
	return fmt.Errorf("unknown MediaFile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MediaFileMutation) ResetEdge(name string) error {
	switch name {
	case mediafile.EdgeMedia:
		m.ResetMedia()
		return nil
	}
	return fmt.Errorf("unknown MediaFile edge %s", name)
}
