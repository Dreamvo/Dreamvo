// Code generated by entc, DO NOT EDIT.

package mediafile

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the mediafile type in the database.
	Label = "media_file"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRenditionName holds the string denoting the rendition_name field in the database.
	FieldRenditionName = "rendition_name"
	// FieldFormat holds the string denoting the format field in the database.
	FieldFormat = "format"
	// FieldTargetBandwidth holds the string denoting the target_bandwidth field in the database.
	FieldTargetBandwidth = "target_bandwidth"
	// FieldVideoBitrate holds the string denoting the video_bitrate field in the database.
	FieldVideoBitrate = "video_bitrate"
	// FieldResolutionWidth holds the string denoting the resolution_width field in the database.
	FieldResolutionWidth = "resolution_width"
	// FieldResolutionHeight holds the string denoting the resolution_height field in the database.
	FieldResolutionHeight = "resolution_height"
	// FieldFramerate holds the string denoting the framerate field in the database.
	FieldFramerate = "framerate"
	// FieldDurationSeconds holds the string denoting the duration_seconds field in the database.
	FieldDurationSeconds = "duration_seconds"
	// FieldMediaType holds the string denoting the media_type field in the database.
	FieldMediaType = "media_type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"

	// EdgeMedia holds the string denoting the media edge name in mutations.
	EdgeMedia = "media"

	// Table holds the table name of the mediafile in the database.
	Table = "media_file"
	// MediaTable is the table the holds the media relation/edge.
	MediaTable = "media_file"
	// MediaInverseTable is the table name for the Media entity.
	// It exists in this package in order to avoid circular dependency with the "media" package.
	MediaInverseTable = "media"
	// MediaColumn is the table column denoting the media relation/edge.
	MediaColumn = "media"
)

// Columns holds all SQL columns for mediafile fields.
var Columns = []string{
	FieldID,
	FieldRenditionName,
	FieldFormat,
	FieldTargetBandwidth,
	FieldVideoBitrate,
	FieldResolutionWidth,
	FieldResolutionHeight,
	FieldFramerate,
	FieldDurationSeconds,
	FieldMediaType,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the MediaFile type.
var ForeignKeys = []string{
	"media",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// RenditionNameValidator is a validator for the "rendition_name" field. It is called by the builders before save.
	RenditionNameValidator func(string) error
	// FormatValidator is a validator for the "format" field. It is called by the builders before save.
	FormatValidator func(string) error
	// DefaultTargetBandwidth holds the default value on creation for the "target_bandwidth" field.
	DefaultTargetBandwidth uint64
	// VideoBitrateValidator is a validator for the "video_bitrate" field. It is called by the builders before save.
	VideoBitrateValidator func(int64) error
	// ResolutionWidthValidator is a validator for the "resolution_width" field. It is called by the builders before save.
	ResolutionWidthValidator func(uint16) error
	// ResolutionHeightValidator is a validator for the "resolution_height" field. It is called by the builders before save.
	ResolutionHeightValidator func(uint16) error
	// FramerateValidator is a validator for the "framerate" field. It is called by the builders before save.
	FramerateValidator func(uint8) error
	// DurationSecondsValidator is a validator for the "duration_seconds" field. It is called by the builders before save.
	DurationSecondsValidator func(float64) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// MediaType defines the type for the "media_type" enum field.
type MediaType string

// MediaType values.
const (
	MediaTypeAudio MediaType = "audio"
	MediaTypeVideo MediaType = "video"
)

func (mt MediaType) String() string {
	return string(mt)
}

// MediaTypeValidator is a validator for the "media_type" field enum values. It is called by the builders before save.
func MediaTypeValidator(mt MediaType) error {
	switch mt {
	case MediaTypeAudio, MediaTypeVideo:
		return nil
	default:
		return fmt.Errorf("mediafile: invalid enum value for media_type field: %q", mt)
	}
}
