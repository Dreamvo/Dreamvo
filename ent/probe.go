// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/dreamvo/gilfoyle/ent/media"
	"github.com/dreamvo/gilfoyle/ent/probe"
	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// Probe is the model entity for the Probe schema.
type Probe struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Filename holds the value of the "filename" field.
	Filename string `json:"filename,omitempty"`
	// Filesize holds the value of the "filesize" field.
	Filesize int `json:"filesize,omitempty"`
	// ChecksumSha256 holds the value of the "checksum_sha256" field.
	ChecksumSha256 string `json:"checksum_sha256,omitempty"`
	// AspectRatio holds the value of the "aspect_ratio" field.
	AspectRatio string `json:"aspect_ratio,omitempty"`
	// Width holds the value of the "width" field.
	Width int `json:"width,omitempty"`
	// Height holds the value of the "height" field.
	Height int `json:"height,omitempty"`
	// DurationSeconds holds the value of the "duration_seconds" field.
	DurationSeconds float64 `json:"duration_seconds,omitempty"`
	// VideoBitrate holds the value of the "video_bitrate" field.
	VideoBitrate int `json:"video_bitrate,omitempty"`
	// AudioBitrate holds the value of the "audio_bitrate" field.
	AudioBitrate int `json:"audio_bitrate,omitempty"`
	// Framerate holds the value of the "framerate" field.
	Framerate float64 `json:"framerate,omitempty"`
	// Format holds the value of the "format" field.
	Format string `json:"format,omitempty"`
	// NbStreams holds the value of the "nb_streams" field.
	NbStreams int `json:"nb_streams,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProbeQuery when eager-loading is set.
	Edges ProbeEdges `json:"edges"`
	media *uuid.UUID
}

// ProbeEdges holds the relations/edges for other nodes in the graph.
type ProbeEdges struct {
	// Media holds the value of the media edge.
	Media *Media `json"media,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProbeEdges) MediaOrErr() (*Media, error) {
	if e.loadedTypes[0] {
		if e.Media == nil {
			// The edge media was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: media.Label}
		}
		return e.Media, nil
	}
	return nil, &NotLoadedError{edge: "media"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Probe) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},       // id
		&sql.NullString{},  // filename
		&sql.NullInt64{},   // filesize
		&sql.NullString{},  // checksum_sha256
		&sql.NullString{},  // aspect_ratio
		&sql.NullInt64{},   // width
		&sql.NullInt64{},   // height
		&sql.NullFloat64{}, // duration_seconds
		&sql.NullInt64{},   // video_bitrate
		&sql.NullInt64{},   // audio_bitrate
		&sql.NullFloat64{}, // framerate
		&sql.NullString{},  // format
		&sql.NullInt64{},   // nb_streams
		&sql.NullTime{},    // created_at
		&sql.NullTime{},    // updated_at
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Probe) fkValues() []interface{} {
	return []interface{}{
		&uuid.UUID{}, // media
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Probe fields.
func (pr *Probe) assignValues(values ...interface{}) error {
	if m, n := len(values), len(probe.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		pr.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field filename", values[0])
	} else if value.Valid {
		pr.Filename = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field filesize", values[1])
	} else if value.Valid {
		pr.Filesize = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field checksum_sha256", values[2])
	} else if value.Valid {
		pr.ChecksumSha256 = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field aspect_ratio", values[3])
	} else if value.Valid {
		pr.AspectRatio = value.String
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field width", values[4])
	} else if value.Valid {
		pr.Width = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field height", values[5])
	} else if value.Valid {
		pr.Height = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field duration_seconds", values[6])
	} else if value.Valid {
		pr.DurationSeconds = value.Float64
	}
	if value, ok := values[7].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field video_bitrate", values[7])
	} else if value.Valid {
		pr.VideoBitrate = int(value.Int64)
	}
	if value, ok := values[8].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field audio_bitrate", values[8])
	} else if value.Valid {
		pr.AudioBitrate = int(value.Int64)
	}
	if value, ok := values[9].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field framerate", values[9])
	} else if value.Valid {
		pr.Framerate = value.Float64
	}
	if value, ok := values[10].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field format", values[10])
	} else if value.Valid {
		pr.Format = value.String
	}
	if value, ok := values[11].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field nb_streams", values[11])
	} else if value.Valid {
		pr.NbStreams = int(value.Int64)
	}
	if value, ok := values[12].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[12])
	} else if value.Valid {
		pr.CreatedAt = value.Time
	}
	if value, ok := values[13].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[13])
	} else if value.Valid {
		pr.UpdatedAt = value.Time
	}
	values = values[14:]
	if len(values) == len(probe.ForeignKeys) {
		if value, ok := values[0].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field media", values[0])
		} else if value != nil {
			pr.media = value
		}
	}
	return nil
}

// QueryMedia queries the media edge of the Probe.
func (pr *Probe) QueryMedia() *MediaQuery {
	return (&ProbeClient{config: pr.config}).QueryMedia(pr)
}

// Update returns a builder for updating this Probe.
// Note that, you need to call Probe.Unwrap() before calling this method, if this Probe
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Probe) Update() *ProbeUpdateOne {
	return (&ProbeClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Probe) Unwrap() *Probe {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Probe is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Probe) String() string {
	var builder strings.Builder
	builder.WriteString("Probe(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", filename=")
	builder.WriteString(pr.Filename)
	builder.WriteString(", filesize=")
	builder.WriteString(fmt.Sprintf("%v", pr.Filesize))
	builder.WriteString(", checksum_sha256=")
	builder.WriteString(pr.ChecksumSha256)
	builder.WriteString(", aspect_ratio=")
	builder.WriteString(pr.AspectRatio)
	builder.WriteString(", width=")
	builder.WriteString(fmt.Sprintf("%v", pr.Width))
	builder.WriteString(", height=")
	builder.WriteString(fmt.Sprintf("%v", pr.Height))
	builder.WriteString(", duration_seconds=")
	builder.WriteString(fmt.Sprintf("%v", pr.DurationSeconds))
	builder.WriteString(", video_bitrate=")
	builder.WriteString(fmt.Sprintf("%v", pr.VideoBitrate))
	builder.WriteString(", audio_bitrate=")
	builder.WriteString(fmt.Sprintf("%v", pr.AudioBitrate))
	builder.WriteString(", framerate=")
	builder.WriteString(fmt.Sprintf("%v", pr.Framerate))
	builder.WriteString(", format=")
	builder.WriteString(pr.Format)
	builder.WriteString(", nb_streams=")
	builder.WriteString(fmt.Sprintf("%v", pr.NbStreams))
	builder.WriteString(", created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Probes is a parsable slice of Probe.
type Probes []*Probe

func (pr Probes) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
