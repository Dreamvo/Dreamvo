basePath: /
definitions:
  api.CreateMedia:
    properties:
      title:
        example: Sheep Discovers How To Use A Trampoline
        type: string
    required:
    - title
    type: object
  api.HealthCheckResponse:
    properties:
      commit:
        type: string
      database_dialect:
        type: string
      debug:
        type: boolean
      max_file_size:
        type: integer
      storage_driver:
        type: string
      tag:
        type: string
    type: object
  api.MediasMetadata:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  api.UpdateMedia:
    properties:
      title:
        example: Sheep Discovers How To Use A Trampoline
        type: string
    required:
    - title
    type: object
  api.UploadMediaFileResponse:
    properties:
      success:
        type: boolean
    type: object
  ent.Media:
    properties:
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      edges:
        $ref: '#/definitions/ent.MediaEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the MediaQuery when eager-loading is set.
      id:
        description: ID of the ent.
        type: string
      message:
        description: Message holds the value of the "message" field.
        type: string
      original_filename:
        description: OriginalFilename holds the value of the "original_filename" field.
        type: string
      playable:
        description: Playable holds the value of the "playable" field.
        type: boolean
      status:
        description: Status holds the value of the "status" field.
        type: string
      title:
        description: Title holds the value of the "title" field.
        type: string
      updated_at:
        description: UpdatedAt holds the value of the "updated_at" field.
        type: string
    type: object
  ent.MediaEdges:
    properties:
      events:
        description: Events holds the value of the events edge.
        items:
          $ref: '#/definitions/ent.MediaEvents'
        type: array
      media_files:
        description: MediaFiles holds the value of the media_files edge.
        items:
          $ref: '#/definitions/ent.MediaFile'
        type: array
      probe:
        $ref: '#/definitions/ent.Probe'
        description: Probe holds the value of the probe edge.
    type: object
  ent.MediaEvents:
    properties:
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      edges:
        $ref: '#/definitions/ent.MediaEventsEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the MediaEventsQuery when eager-loading is set.
      id:
        description: ID of the ent.
        type: string
      level:
        description: Level holds the value of the "level" field.
        type: string
      message:
        description: Message holds the value of the "message" field.
        type: string
      reason:
        description: Reason holds the value of the "reason" field.
        type: string
    type: object
  ent.MediaEventsEdges:
    properties:
      media:
        $ref: '#/definitions/ent.Media'
        description: Media holds the value of the media edge.
    type: object
  ent.MediaFile:
    properties:
      audio_bitrate:
        description: AudioBitrate holds the value of the "audio_bitrate" field.
        type: integer
      audio_codec:
        description: AudioCodec holds the value of the "audio_codec" field.
        type: string
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      duration_seconds:
        description: DurationSeconds holds the value of the "duration_seconds" field.
        type: number
      edges:
        $ref: '#/definitions/ent.MediaFileEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the MediaFileQuery when eager-loading is set.
      entry_file:
        description: EntryFile holds the value of the "entry_file" field.
        type: string
      format:
        description: Format holds the value of the "format" field.
        type: string
      framerate:
        description: Framerate holds the value of the "framerate" field.
        type: integer
      id:
        description: ID of the ent.
        type: string
      media_type:
        description: MediaType holds the value of the "media_type" field.
        type: string
      message:
        description: Message holds the value of the "message" field.
        type: string
      mimetype:
        description: Mimetype holds the value of the "mimetype" field.
        type: string
      rendition_name:
        description: RenditionName holds the value of the "rendition_name" field.
        type: string
      resolution_height:
        description: ResolutionHeight holds the value of the "resolution_height" field.
        type: integer
      resolution_width:
        description: ResolutionWidth holds the value of the "resolution_width" field.
        type: integer
      status:
        description: Status holds the value of the "status" field.
        type: string
      target_bandwidth:
        description: TargetBandwidth holds the value of the "target_bandwidth" field.
        type: integer
      updated_at:
        description: UpdatedAt holds the value of the "updated_at" field.
        type: string
      video_bitrate:
        description: VideoBitrate holds the value of the "video_bitrate" field.
        type: integer
      video_codec:
        description: VideoCodec holds the value of the "video_codec" field.
        type: string
    type: object
  ent.MediaFileEdges:
    properties:
      media:
        $ref: '#/definitions/ent.Media'
        description: Media holds the value of the media edge.
    type: object
  ent.Probe:
    properties:
      aspect_ratio:
        description: AspectRatio holds the value of the "aspect_ratio" field.
        type: string
      audio_bitrate:
        description: AudioBitrate holds the value of the "audio_bitrate" field.
        type: integer
      checksum_sha256:
        description: ChecksumSha256 holds the value of the "checksum_sha256" field.
        type: string
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      duration_seconds:
        description: DurationSeconds holds the value of the "duration_seconds" field.
        type: number
      edges:
        $ref: '#/definitions/ent.ProbeEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ProbeQuery when eager-loading is set.
      filename:
        description: Filename holds the value of the "filename" field.
        type: string
      filesize:
        description: Filesize holds the value of the "filesize" field.
        type: integer
      format:
        description: Format holds the value of the "format" field.
        type: string
      framerate:
        description: Framerate holds the value of the "framerate" field.
        type: number
      height:
        description: Height holds the value of the "height" field.
        type: integer
      id:
        description: ID of the ent.
        type: string
      nb_streams:
        description: NbStreams holds the value of the "nb_streams" field.
        type: integer
      updated_at:
        description: UpdatedAt holds the value of the "updated_at" field.
        type: string
      video_bitrate:
        description: VideoBitrate holds the value of the "video_bitrate" field.
        type: integer
      width:
        description: Width holds the value of the "width" field.
        type: integer
    type: object
  ent.ProbeEdges:
    properties:
      media:
        $ref: '#/definitions/ent.Media'
        description: Media holds the value of the media edge.
    type: object
  util.DataResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        type: object
      metadata:
        type: object
    type: object
  util.ErrorResponse:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
host: demo-v1.gilfoyle.dreamvo.com
info:
  contact: {}
  description: Cloud-native media hosting & streaming server for businesses.
  license:
    name: GNU General Public License v3.0
    url: https://github.com/dreamvo/gilfoyle/blob/master/LICENSE
  title: Gilfoyle server
  version: v1
paths:
  /healthz:
    get:
      description: Check for the health of the service
      operationId: checkHealth
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.DataResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.HealthCheckResponse'
              type: object
      summary: Check service status
      tags:
      - Instance
  /medias:
    get:
      description: Get latest created medias
      operationId: getAllMedias
      parameters:
      - description: Max number of results
        in: query
        name: limit
        type: integer
      - description: Number of results to ignore
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.DataResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/ent.Media'
                  type: array
                metadata:
                  $ref: '#/definitions/api.MediasMetadata'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Query medias
      tags:
      - Medias
    post:
      consumes:
      - application/json
      description: Create a new media
      operationId: createMedia
      parameters:
      - description: Media data
        in: body
        name: media
        required: true
        schema:
          $ref: '#/definitions/api.CreateMedia'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.DataResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.Media'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Create a media
      tags:
      - Medias
  /medias/{id}:
    delete:
      description: Delete one media
      operationId: deleteMedia
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.DataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Delete a media
      tags:
      - Medias
    get:
      description: Get one media
      operationId: getMedia
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.DataResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.Media'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Get a media
      tags:
      - Medias
    patch:
      consumes:
      - application/json
      description: Update an existing media
      operationId: updateMedia
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: string
      - description: Media data
        in: body
        name: media
        required: true
        schema:
          $ref: '#/definitions/api.UpdateMedia'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.DataResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.Media'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Update a media
      tags:
      - Medias
  /medias/{id}/upload/audio:
    post:
      consumes:
      - multipart/form-data
      deprecated: true
      description: Upload a new audio file for a given media ID
      operationId: uploadAudio
      parameters:
      - description: Media identifier
        in: path
        name: id
        required: true
        type: string
      - description: Audio file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.DataResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.UploadMediaFileResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Upload a audio file
      tags:
      - Medias
  /medias/{id}/upload/video:
    post:
      consumes:
      - multipart/form-data
      description: Upload a new video file for a given media ID
      operationId: uploadVideo
      parameters:
      - description: Media identifier
        in: path
        name: id
        required: true
        type: string
      - description: Video file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.DataResponse'
            - properties:
                data:
                  $ref: '#/definitions/api.UploadMediaFileResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Upload a video file
      tags:
      - Medias
  /medias/{media_id}/attachments:
    get:
      deprecated: true
      description: Get attachments of a media
      operationId: getMediaAttachments
      parameters:
      - description: Media identifier
        in: path
        name: media_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.DataResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Get attachments of a media
      tags:
      - Attachments
  /medias/{media_id}/attachments/{key}:
    delete:
      deprecated: true
      description: Delete attachment of a media
      operationId: deleteMediaAttachment
      parameters:
      - description: Media identifier
        in: path
        name: media_id
        required: true
        type: string
      - description: Attachment unique identifier
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.DataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Delete attachment of a media
      tags:
      - Attachments
    post:
      consumes:
      - multipart/form-data
      deprecated: true
      description: Add attachment to a media
      operationId: addMediaAttachment
      parameters:
      - description: Media identifier
        in: path
        name: media_id
        required: true
        type: string
      - description: Attachment unique identifier
        in: path
        name: key
        required: true
        type: string
      - description: Attachment file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.DataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Add attachment to a media
      tags:
      - Attachments
  /medias/{media_id}/stream/{filename}:
    get:
      description: Get HLS playlist file of a media
      operationId: getMediaPlaylistFile
      parameters:
      - description: Media identifier
        in: path
        name: media_id
        required: true
        type: string
      - description: HLS filename
        in: path
        name: filename
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          headers:
            Content-Type:
              description: application/octet-stream
              type: string
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Get HLS playlist file of a media
      tags:
      - Stream
schemes:
- http
- https
swagger: "2.0"
